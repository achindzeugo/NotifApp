[HttpPost]
public async Task<IActionResult> ToggleStatus(int id)
{
    var criticite = await _context.Criticites.FindAsync(id);
    if (criticite == null)
    {
        return NotFound(new { success = false, message = "Criticité introuvable." });
    }

    // Inversion du statut
    criticite.Statut = criticite.Statut == "Actif" ? "Inactif" : "Actif";

    // Mettre à jour la date de désactivation si nécessaire
    criticite.DateDesactivation = criticite.Statut == "Inactif" ? DateTime.Now : (DateTime?)null;

    await _context.SaveChangesAsync();

    return Json(new
    {
        success = true,
        message = $"Vous venez de {(criticite.Statut == "Actif" ? "activer" : "désactiver")} la criticité {criticite.CriticiteNom}."
    });
}


<script>
    document.querySelectorAll('.toggle-status').forEach(toggle => {
        toggle.addEventListener('change', function () {
            const criticiteId = this.getAttribute('data-id');
            const isChecked = this.checked;

            fetch('/Criticite/ToggleStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ id: criticiteId })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(data.message);
                    } else {
                        alert('Erreur: ' + data.message);
                        this.checked = !isChecked; // Revert the toggle on failure
                    }
                })
                .catch(error => {
                    alert('Une erreur est survenue.');
                    this.checked = !isChecked; // Revert the toggle on failure
                });
        });
    });
</script>




<td>
    <label class="switch">
        <input type="checkbox" 
               class="toggle-status" 
               data-id="@criticite.CriticiteId" 
               @(criticite.Statut == "Actif" ? "checked" : "")>
        <span class="slider round"></span>
    </label>
</td>



<td>
    <label class="switch">
        <input type="checkbox" 
               class="toggle-status" 
               data-id="@criticite.CriticiteId" 
               @(criticite.Statut == "Actif" ? "checked" : "")>
        <span class="slider round"></span>
    </label>
</td>


<style>
    .switch {
        position: relative;
        display: inline-block;
        width: 34px;
        height: 20px;
    }

    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 14px;
        width: 14px;
        left: 3px;
        bottom: 3px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }

    input:checked + .slider {
        background-color: #4CAF50;
    }

    input:checked + .slider:before {
        transform: translateX(14px);
    }
</style>
