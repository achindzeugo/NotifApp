<div class="row">
    <div class="col-md-6">
        <label for="startDate">Date de début :</label>
        <input type="date" id="startDate" class="form-control" />
    </div>
    <div class="col-md-6">
        <label for="endDate">Date de fin :</label>
        <input type="date" id="endDate" class="form-control" />
    </div>
</div>
<div class="mt-3">
    <button id="filterButton" class="btn btn-primary">Filtrer</button>
</div>

<!-- Monthly Chart -->
<div class="col-md-6 ms-2 mt-4">
    <div class="card">
        <div class="chart-container">
            <canvas id="monthlyChart"></canvas>
        </div>
    </div>
</div>





[HttpGet]
public IActionResult GetMonthlyIncidentData(DateTime? startDate, DateTime? endDate)
{
    // Filtrer les incidents par plage de dates
    var query = _context.Incidents.AsQueryable();

    if (startDate.HasValue)
        query = query.Where(i => i.Debutdimpact >= startDate.Value);

    if (endDate.HasValue)
        query = query.Where(i => i.Debutdimpact <= endDate.Value);

    // Récupérer les données groupées par mois
    var incidentData = query
        .GroupBy(i => i.Debutdimpact.Value.Month)
        .Select(g => new { Month = g.Key, Count = g.Count() })
        .ToList();

    // Ajouter les mois manquants
    var allMonths = Enumerable.Range(1, 12)
        .Select(m => new
        {
            Month = m,
            Count = incidentData.FirstOrDefault(i => i.Month == m)?.Count ?? 0
        })
        .ToList();

    return Json(allMonths);
}







<script>
    document.getElementById('filterButton').addEventListener('click', function () {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

        // Construire l'URL avec les paramètres de filtre
        const url = `/Homes/GetMonthlyIncidentData?startDate=${startDate}&endDate=${endDate}`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const monthNames = [
                    'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin',
                    'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'
                ];

                const labels = data.map(item => monthNames[item.Month - 1]);
                const counts = data.map(item => item.Count);

                // Mettre à jour le graphique
                if (window.monthlyChartInstance) {
                    window.monthlyChartInstance.destroy();
                }

                const ctx = document.getElementById('monthlyChart').getContext('2d');
                window.monthlyChartInstance = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Évolution des incidents par mois',
                            data: counts,
                            borderColor: 'blue',
                            backgroundColor: 'rgba(0, 0, 255, 0.2)',
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { display: true },
                            tooltip: { enabled: true }
                        },
                        scales: {
                            x: {
                                title: { display: true, text: 'Mois' }
                            },
                            y: {
                                title: { display: true, text: 'Nombre d\'Incidents' },
                                beginAtZero: true
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Erreur lors de la récupération des données :', error));
    });
</script>



