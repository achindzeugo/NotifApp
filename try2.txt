<button class="btn btn-info ms-3" title="Pings" onclick="loadPingResults(@statutapplicatif.StatutId)">
        <i class="fas fa-network-wired"></i>
    </button>

<div class="modal fade" id="pingResultsModal" tabindex="-1" aria-labelledby="pingResultsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-black text-white">
                <h5 class="modal-title" id="pingResultsModalLabel">Rapport des Pings</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="pingResultsContent">
                    <!-- Les résultats des pings seront chargés ici -->
                </div>
            </div>
            <div class="modal-footer">
                <button id="downloadPingReport" class="btn btn-black">
                    <i class="fas fa-file-download"></i> Télécharger Rapport PDF
                </button>
            </div>
        </div>
    </div>
</div>



  <script>
    function loadPingResults(statutId) {
        $.ajax({
            url: '@Url.Action("PingAddresses", "StatutApplicatif")/' + statutId,
            type: 'GET',
            success: function (data) {
                $('#pingResultsContent').html(data);
                $('#pingResultsModal').modal('show');
            },
            error: function () {
                alert('Erreur lors de l\'exécution des pings.');
            }
        });
    }

    // Télécharger le rapport PDF
    document.getElementById("downloadPingReport").addEventListener("click", function () {
        var statutId = $('#pingResultsContent').data('statut-id');
        window.location.href = '@Url.Action("DownloadPingReport", "StatutApplicatif")?id=' + statutId;
    });
</script>
[HttpGet]
public IActionResult PingAddresses(int id)
{
    var addresses = _context.ApplicatifAddresses
        .Where(a => a.StatutId == id)
        .Select(a => a.Address)
        .ToList();

    var pingResults = new List<PingResult>();
    foreach (var address in addresses)
    {
        var result = PingAddress(address);
        pingResults.Add(result);
    }

    // Renvoyer les résultats sous forme partielle
    return PartialView("_PingResults", pingResults);
}

[HttpGet]
public IActionResult DownloadPingReport(int id)
{
    var addresses = _context.ApplicatifAddresses
        .Where(a => a.StatutId == id)
        .Select(a => a.Address)
        .ToList();

    var pingResults = new List<PingResult>();
    foreach (var address in addresses)
    {
        var result = PingAddress(address);
        pingResults.Add(result);
    }

    var pdfBytes = GeneratePingReportPDF(pingResults);
    return File(pdfBytes, "application/pdf", "PingReport.pdf");
}

// Méthode pour exécuter un ping
private PingResult PingAddress(string address)
{
    var ping = new Ping();
    try
    {
        var reply = ping.Send(address);
        return new PingResult
        {
            Address = address,
            Status = reply.Status.ToString(),
            RoundtripTime = reply.RoundtripTime
        };
    }
    catch
    {
        return new PingResult
        {
            Address = address,
            Status = "Erreur",
            RoundtripTime = -1
        };
    }
}

// Méthode pour générer le rapport PDF
private byte[] GeneratePingReportPDF(List<PingResult> pingResults)
{
    using var stream = new MemoryStream();
    var writer = new PdfWriter(stream);
    var pdf = new PdfDocument(writer);
    var document = new Document(pdf);

    document.Add(new Paragraph("Rapport des Pings").SetFontSize(18).SetBold());
    document.Add(new Paragraph("Date: " + DateTime.Now.ToString("dd/MM/yyyy HH:mm")));

    var table = new Table(3);
    table.AddHeaderCell("Adresse");
    table.AddHeaderCell("Statut");
    table.AddHeaderCell("Temps aller-retour (ms)");

    foreach (var result in pingResults)
    {
        table.AddCell(result.Address);
        table.AddCell(result.Status);
        table.AddCell(result.RoundtripTime >= 0 ? result.RoundtripTime.ToString() : "N/A");
    }

    document.Add(table);
    document.Close();

    return stream.ToArray();
}




@model IEnumerable<PingResult>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Adresse</th>
            <th>Statut</th>
            <th>Temps aller-retour (ms)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var result in Model)
        {
            <tr>
                <td>@result.Address</td>
                <td>@result.Status</td>
                <td>@(result.RoundtripTime >= 0 ? result.RoundtripTime.ToString() : "N/A")</td>
            </tr>
        }
    </tbody>
</table>




