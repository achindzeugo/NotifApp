@model IEnumerable<NotifApps.Models.Applicatif>

<h2 class="">Applicatifs</h2>
<hr />
<div>
    <a asp-action="Create" class="btn btn-black">Créer nouvel Applicatif</a>
</div>
<br />

<div>
    <input type="text" id="searchInput" class="form-control" placeholder="Rechercher par nom d'applicatif...">
    <button type="submit" class="btn btn-black mt-2 fas fa-search"></button>
</div>
<br />

<table class="table table-bordered">
    <thead class="thead-danger bg-danger">
        <tr>
            <th class="bg-black text-white">Noms</th>
            <th class="bg-black text-white">Descriptions</th>
            <th class="bg-black text-white">Liens</th>
            <th class="bg-black text-white">Statut</th>
            <th class="bg-black text-white">Déploiement</th>
            <th class="bg-black text-white">Addresses</th>
            <th class="bg-black text-white">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.AppNom</td>
                <td>@item.Descriptif</td>
                <td><a href="@item.LienWeb" class="text-danger" target="_blank">@item.LienWeb</a></td>
                <td>@item.StatutApplicatifs.StatutNom</td>
                <td>@item.Hebergement</td>

                <td>
                    <ul>
                        @foreach (var address in item.Addresses)
                        {
                            <li>@address.Type: @address.Value</li>
                        }
                    </ul>
                </td>
                <td>
                    <div class="d-flex justify-content-between">
                        <a asp-action="Details" asp-route-id="@item.AppId" class="btn btn-black ms-2 btn-sm" title="Détails"><i class="fas fa-list"></i></a>
                        <a asp-action="Edit" asp-route-id="@item.AppId" class="btn btn-warning ms-2 btn-sm" title="Modifier"><i class="fas fa-edit"></i></a>
                        <button class="btn btn-primary ms-2 btn-sm" title="Effectuer des pings" onclick="performPing(@item.AppId)">
                            <i class="fas fa-network-wired"></i>
                        </button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<style>
    .table {
        border-top-color: red;
        border-top-style: solid;
        border-top-width: 5px;
    }
</style>

<script>
    document.getElementById('searchInput').addEventListener('keyup', function() {
        var searchString = this.value.toLowerCase();
        var rows = document.querySelectorAll('tbody tr');

        rows.forEach(function(row) {
            var appName = row.querySelector('td:first-child').textContent.toLowerCase();
            if (appName.includes(searchString)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });

    // Fonction pour effectuer des pings
    function performPing(appId) {
        $.ajax({
            url: '@Url.Action("PingAddresses", "Applicatifs")/' + appId,
            type: 'GET',
            success: function (data) {
                $('#pingResultsContent').html(data);
                $('#pingResultsModal').modal('show');
            },
            error: function () {
                alert('Erreur lors de l\'exécution des pings.');
            }
        });
    }

    // Téléchargement du rapport en PDF
    document.getElementById('downloadPingReport').addEventListener('click', function() {
        const appId = $('#pingResultsModal').data('app-id'); // Récupérer l'ID de l'applicatif
        window.location.href = '@Url.Action("DownloadPingReport", "Applicatifs")?appId=' + appId;
    });
</script>

<!-- Modal pour afficher les résultats des pings -->
<div class="modal fade" id="pingResultsModal" tabindex="-1" aria-labelledby="pingResultsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-black text-white">
                <h5 class="modal-title" id="pingResultsModalLabel">Rapport des Pings</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="pingResultsContent">
                    <!-- Les résultats des pings seront chargés ici -->
                </div>
            </div>
            <div class="modal-footer">
                <button id="downloadPingReport" class="btn btn-black">
                    <i class="fas fa-file-download"></i> Télécharger Rapport PDF
                </button>
            </div>
        </div>
    </div>
</div>





using System.Diagnostics;
using System.Text;

public IActionResult PingAddresses(int id)
{
    // Récupération de l'applicatif par ID
    var applicatif = _context.Applicatifs
        .Include(a => a.Addresses) // Inclure les adresses associées
        .FirstOrDefault(a => a.AppId == id);

    if (applicatif == null)
    {
        return NotFound("Applicatif introuvable.");
    }

    // Liste pour stocker les résultats des pings
    var pingResults = new List<string>();

    foreach (var address in applicatif.Addresses)
    {
        // Exécution du ping
        var ping = new Ping();
        try
        {
            var reply = ping.Send(address.Value);
            if (reply.Status == IPStatus.Success)
            {
                pingResults.Add($"Adresse {address.Value} : Réussi en {reply.RoundtripTime} ms.");
            }
            else
            {
                pingResults.Add($"Adresse {address.Value} : Échec (Statut : {reply.Status}).");
            }
        }
        catch (Exception ex)
        {
            pingResults.Add($"Adresse {address.Value} : Erreur - {ex.Message}");
        }
    }

    // Retour des résultats dans un format HTML pour le modal
    var resultHtml = new StringBuilder("<ul>");
    foreach (var result in pingResults)
    {
        resultHtml.Append($"<li>{result}</li>");
    }
    resultHtml.Append("</ul>");

    return Content(resultHtml.ToString(), "text/html");
}



using System.Diagnostics;
using System.Text;

public IActionResult PingAddresses(int id)
{
    // Récupération de l'applicatif par ID
    var applicatif = _context.Applicatifs
        .Include(a => a.Addresses) // Inclure les adresses associées
        .FirstOrDefault(a => a.AppId == id);

    if (applicatif == null)
    {
        return NotFound("Applicatif introuvable.");
    }

    // Liste pour stocker les résultats des pings
    var pingResults = new List<string>();

    foreach (var address in applicatif.Addresses)
    {
        // Exécution du ping
        var ping = new Ping();
        try
        {
            var reply = ping.Send(address.Value);
            if (reply.Status == IPStatus.Success)
            {
                pingResults.Add($"Adresse {address.Value} : Réussi en {reply.RoundtripTime} ms.");
            }
            else
            {
                pingResults.Add($"Adresse {address.Value} : Échec (Statut : {reply.Status}).");
            }
        }
        catch (Exception ex)
        {
            pingResults.Add($"Adresse {address.Value} : Erreur - {ex.Message}");
        }
    }

    // Retour des résultats dans un format HTML pour le modal
    var resultHtml = new StringBuilder("<ul>");
    foreach (var result in pingResults)
    {
        resultHtml.Append($"<li>{result}</li>");
    }
    resultHtml.Append("</ul>");

    return Content(resultHtml.ToString(), "text/html");
}




using System.Diagnostics;
using System.Text;

public IActionResult PingAddresses(int id)
{
    // Récupération de l'applicatif par ID
    var applicatif = _context.Applicatifs
        .Include(a => a.Addresses) // Inclure les adresses associées
        .FirstOrDefault(a => a.AppId == id);

    if (applicatif == null)
    {
        return NotFound("Applicatif introuvable.");
    }

    // Liste pour stocker les résultats des pings
    var pingResults = new List<string>();

    foreach (var address in applicatif.Addresses)
    {
        // Exécution du ping
        var ping = new Ping();
        try
        {
            var reply = ping.Send(address.Value);
            if (reply.Status == IPStatus.Success)
            {
                pingResults.Add($"Adresse {address.Value} : Réussi en {reply.RoundtripTime} ms.");
            }
            else
            {
                pingResults.Add($"Adresse {address.Value} : Échec (Statut : {reply.Status}).");
            }
        }
        catch (Exception ex)
        {
            pingResults.Add($"Adresse {address.Value} : Erreur - {ex.Message}");
        }
    }

    // Retour des résultats dans un format HTML pour le modal
    var resultHtml = new StringBuilder("<ul>");
    foreach (var result in pingResults)
    {
        resultHtml.Append($"<li>{result}</li>");
    }
    resultHtml.Append("</ul>");

    return Content(resultHtml.ToString(), "text/html");
}

