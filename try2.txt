@model IEnumerable<NotifApps.Models.Criticite>

<h2>Criticités</h2>
<hr />
<p>
    <button class="btn btn-black" data-bs-toggle="modal" data-bs-target="#createCriticiteModal">
        Ajouter Criticité
    </button>
</p>

<div>
    <input type="text" id="searchInput" class="form-control" placeholder="Rechercher par criticité...">
    <button type="submit" class="btn btn-black mt-2 fas fa-search"></button>
</div>
<br />

<table class="table">
    <thead>
        <tr>
            <th class="bg-black text-white">Nom de Criticité</th>
            <th class="bg-black text-white">Badge</th>
            <th class="bg-black text-white">Descriptions</th>
            <th class="bg-black text-white">Statut</th>
            <th class="bg-black text-white">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var criticite in Model)
        {
            <tr>
                <td>@criticite.CriticiteNom</td>
                <td>
                    <span class="badge text-black" style="background-color: @(criticite.Couleur ?? "gray");">
                        @(criticite.CriticiteNom?.ToUpper() ?? "N/A")
                    </span>
                </td>
                <td>
                    @if (criticite.Descriptions.Length > 50)
                    {
                        @criticite.Descriptions.Substring(0, 50)
                    }
                    else
                    {
                        @criticite.Descriptions
                    }
                </td>
                <td>
                    <form method="post" asp-action="ToggleStatus">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@criticite.CriticiteId" />
                        <label class="switch">
                            <input type="checkbox" 
                                   name="statut" 
                                   onchange="this.form.submit()" 
                                   @(criticite.Statut == "Actif" ? "checked" : "") />
                            <span class="slider"></span>
                        </label>
                    </form>
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@criticite.CriticiteId" class="btn btn-black" title="Détails">
                        <i class="fas fa-list"></i>
                    </a>
                    <a asp-action="EditCriticite" asp-route-id="@criticite.CriticiteId" class="btn btn-warning" title="Modifier">
                        <i class="fas fa-edit"></i>
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Modal: Create Criticité -->
<div class="modal fade" id="createCriticiteModal" tabindex="-1" aria-labelledby="createCriticiteLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-black text-white">
                <h5 class="modal-title" id="createCriticiteLabel">Créer une Criticité</h5>
                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="CreateCriticite" id="createCriticiteForm">
                    <div class="form-group">
                        <label for="CriticiteNom" class="form-label">Nom de la Criticité</label>
                        <input id="CriticiteNom" name="CriticiteNom" class="form-control" placeholder="Entrez le nom de la criticité" />
                        <span class="text-danger" id="criticiteNomError"></span>
                    </div>
                    <div class="form-group">
                        <label for="Couleur" class="form-label">Couleur</label>
                        <select id="Couleur" name="Couleur" class="form-control">
                            <option value="">-- Sélectionnez une couleur --</option>
                            <option value="red">Rouge</option>
                            <option value="orange">Orange</option>
                            <option value="yellow">Jaune</option>
                            <option value="blue">Bleu</option>
                            <option value="green">Vert</option>
                            <option value="purple">Violet</option>
                            <option value="pink">Rose</option>
                            <option value="gray">Gris</option>
                            <option value="brown">Marron</option>
                            <option value="cyan">Cyan</option>
                            <option value="lime">Lime</option>
                        </select>
                        <span class="text-danger" id="couleurError"></span>
                    </div>
                    <div class="form-group">
                        <label for="Descriptions" class="form-label">Description</label>
                        <textarea id="Descriptions" name="Descriptions" class="form-control" placeholder="Ajoutez une description si nécessaire"></textarea>
                        <span class="text-danger" id="descriptionError"></span>
                    </div>
                    <div class="modal-footer justify-content-center">
                        <button type="submit" class="btn btn-danger ms-3">
                            <i class="fas fa-save"></i> Enregistrer
                        </button>
                        <button type="button" class="btn btn-black ms-3" data-bs-dismiss="modal">
                            <i class="fas fa-ban"></i> Annuler
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal: Duplication détectée -->
@if (TempData["ExistingCriticite"] != null && (bool)TempData["ExistingCriticite"])
{
    <div class="modal fade show" id="duplicateCriticiteModal" tabindex="-1" aria-labelledby="duplicateCriticiteLabel" aria-hidden="true" style="display:block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-warning-subtle border-black">
                    <h5 class="modal-title" id="duplicateCriticiteLabel">Duplication détectée</h5>
                    <i class="fas fa-exclamation-triangle ms-4"></i>
                    <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body bg-light-subtle">
                    <p>La criticité avec le nom <strong>@TempData["CriticiteNom"]</strong> existe déjà. Voulez-vous continuer ?</p>
                </div>
                <div class="modal-footer bg-warning-subtle">
                    <form asp-action="CreateCriticite" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="CriticiteNom" value="@TempData["CriticiteNom"]" />
                        <input type="hidden" name="forceCreate" value="true" />
                        <input type="hidden" name="Descriptions" value="@TempData["Descriptions"]" />
                        <button type="submit" class="btn btn-danger">Oui</button>
                    </form>
                    <button type="button" class="btn btn-black" data-bs-dismiss="modal">Non</button>
                </div>
            </div>
        </div>
    </div>
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var modalTrigger = '@TempData["ExistingCriticite"]' === "true";
        if (modalTrigger) {
            var duplicateModal = new bootstrap.Modal(document.getElementById('duplicateCriticiteModal'));
            duplicateModal.show();
        }
    });

    // Recherche dans le tableau
    document.getElementById('searchInput').addEventListener('keyup', function () {
        var searchString = this.value.toLowerCase();
        var rows = document.querySelectorAll('tbody tr');

        rows.forEach(function (row) {
            var appName = row.querySelector('td:first-child').textContent.toLowerCase();
            if (appName.includes(searchString)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });
</script>


















[HttpPost]
public JsonResult CreateCriticite([FromBody] Criticite criticite)
{
    if (criticite == null || string.IsNullOrWhiteSpace(criticite.CriticiteNom))
    {
        return Json(new { success = false, message = "Données invalides." });
    }

    // Vérifiez les doublons
    var exists = _context.Criticites.Any(c => c.CriticiteNom == criticite.CriticiteNom);
    if (exists)
    {
        return Json(new { success = false, message = "Une criticité avec ce nom existe déjà." });
    }

    // Ajoutez la criticité
    _context.Criticites.Add(criticite);
    _context.SaveChanges();

    return Json(new { success = true, message = "Criticité ajoutée avec succès !" });
}


[HttpPost]
public JsonResult CheckDuplicate([FromBody] Criticite criticite)
{
    var exists = _context.Criticites.Any(c => c.CriticiteNom == criticite.CriticiteNom);
    return Json(new { exists });
}


document.getElementById("saveCriticiteBtn").addEventListener("click", function () {
    // Récupérer les données du formulaire
    var formData = {
        CriticiteNom: document.getElementById("CriticiteNom").value.trim(),
        Couleur: document.getElementById("Couleur").value,
        Descriptions: document.getElementById("Descriptions").value.trim()
    };

    if (!formData.CriticiteNom) {
        alert("Veuillez entrer un nom pour la criticité.");
        return;
    }

    // Vérification des doublons
    fetch('/Criticite/CheckDuplicate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ CriticiteNom: formData.CriticiteNom })
    })
        .then(response => response.json())
        .then(data => {
            if (data.exists) {
                alert("Une criticité avec ce nom existe déjà !");
            } else {
                // Envoi du formulaire
                fetch('/Criticite/CreateCriticite', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            alert(result.message);
                            location.reload();
                        } else {
                            alert(result.message || "Erreur lors de la création de la criticité !");
                        }
                    })
                    .catch(error => console.error("Erreur:", error));
            }
        })
        .catch(error => console.error("Erreur lors de la vérification des doublons:", error));
});
























@model IEnumerable<NotifApps.Models.Criticite>

<h2>Criticités</h2>
<hr />
<p>
    <button class="btn btn-black" data-bs-toggle="modal" data-bs-target="#createCriticiteModal">
        Ajouter Criticité
    </button>
</p>


<div>
    <input type="text" id="searchInput" class="form-control" placeholder="Rechercher par criticité...">
    <button type="submit" class="btn btn-black mt-2 fas fa-search"></button>
</div>
<br />
<table class="table table">
    <thead>
        <tr>
            <th class="bg-black text-white">Nom de Criticité</th>
            <th class="bg-black text-white">Badge</th>
            <th class="bg-black text-white">Descriptions</th>
            <th class="bg-black text-white">Statut</th>
            <th class="bg-black text-white">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var criticite in Model)
        {
            <tr>
                <td>@criticite.CriticiteNom</td>
                <td>
                    <span class="badge text-black" style="background-color: @(criticite.Couleur ?? "gray");">
                        @(criticite.CriticiteNom?.ToUpper() ?? "N/A")
                    </span>
                </td>
                <td>
                    @if (criticite.Descriptions.Length > 50)
                    {
                        @criticite.Descriptions.Substring(0, 50)
                    }
                    else
                    {
                        @criticite.Descriptions
                    }
                </td>
                <td>
                    <form method="post" asp-action="ToggleStatus">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@criticite.CriticiteId" />
                        <label class="switch">
                            <input type="checkbox"
                                   name="statut"
                                   onchange="this.form.submit()"
                                   @(criticite.Statut == "Actif" ? "checked" : "") />
                            <span class="slider"></span>
                        </label>
                    </form>
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@criticite.CriticiteId" class="btn btn-black" title="Détails">
                        <i class="fas fa-list"></i>
                    </a>
                    <a asp-action="EditCriticite" asp-route-id="@criticite.CriticiteId" class="btn btn-warning" title="Modifier">
                        <i class="fas fa-edit"></i>
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>


<div class="modal fade" id="createCriticiteModal" tabindex="-1" aria-labelledby="createCriticiteLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-black text-white">
                <h5 class="modal-title" id="createCriticiteLabel">Créer une Criticité</h5>
                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createCriticiteForm">
                    <div class="form-group">
                        <label for="CriticiteNom" class="form-label">Nom de la Criticité</label>
                        <input id="CriticiteNom" name="CriticiteNom" class="form-control" placeholder="Entrez le nom de la criticité" />
                        <span class="text-danger" id="criticiteNomError"></span>
                    </div>
                    <div class="form-group">
                        <label for="Couleur" class="form-label">Couleur</label>
                        <select id="Couleur" name="Couleur" class="form-control">
                            <option value="">-- Sélectionnez une couleur --</option>
                            <option value="red">Rouge</option>
                            <option value="orange">Orange</option>
                            <option value="yellow">Jaune</option>
                            <option value="blue">Bleu</option>
                            <option value="green">Vert</option>
                            <option value="purple">Violet</option>
                            <option value="pink">Rose</option>
                            <option value="gray">Gris</option>
                            <option value="brown">Marron</option>
                            <option value="cyan">Cyan</option>
                            <option value="lime">Lime</option>
                        </select>
                        <span class="text-danger" id="couleurError"></span>
                    </div>
                    <div class="form-group">
                        <label for="Descriptions" class="form-label">Description</label>
                        <textarea id="Descriptions" name="Descriptions" class="form-control" placeholder="Ajoutez une description si nécessaire"></textarea>
                        <span class="text-danger" id="descriptionError"></span>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-black" data-bs-dismiss="modal">Annuler</button>
                <button type="button" id="saveCriticiteBtn" class="btn btn-danger">Enregistrer</button>
            </div>
        </div>
    </div>
</div>


<style>
    .switch {
        position: relative;
        display: inline-block;
        width: 34px;
        height: 20px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 14px;
            width: 14px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

    input:checked + .slider {
        background-color: #4CAF50;
    }

        input:checked + .slider:before {
            transform: translateX(14px);
        }
</style>

<script>
    document.getElementById('searchInput').addEventListener('keyup', function () {
        var searchString = this.value.toLowerCase();
        var rows = document.querySelectorAll('tbody tr');

        rows.forEach(function (row) {
            var appName = row.querySelector('td:first-child').textContent.toLowerCase();
            if (appName.includes(searchString)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });



    document.getElementById("saveCriticiteBtn").addEventListener("click", function () {
    // Récupérer les données du formulaire
    var formData = {
        CriticiteNom: document.getElementById("CriticiteNom").value,
        Couleur: document.getElementById("Couleur").value,
        Descriptions: document.getElementById("Descriptions").value
    };

    // Vérification des doublons
    fetch('/Criticite/CheckDuplicate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ CriticiteNom: formData.CriticiteNom })
    })
        .then(response => response.json())
        .then(data => {
            if (data.exists) {
                alert("Une criticité avec ce nom existe déjà !");
            } else {
                // Envoi du formulaire
                fetch('/Criticite/CreateCriticite', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            alert("Criticité ajoutée avec succès !");
                            location.reload();
                        } else {
                            alert("Erreur lors de la création de la criticité !");
                        }
                    });
            }
        });
});


</script>
<script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function() {
            var message = '@TempData["Message"]';
            if (message) {
                alert(message);
            }
        });
</script>

=======================================================================================================================================
<p>
    <button class="btn btn-black" data-bs-toggle="modal" data-bs-target="#createCriticiteModal">
        Ajouter Criticité
    </button>
</p>


<div class="modal fade" id="createCriticiteModal" tabindex="-1" aria-labelledby="createCriticiteLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-black text-white">
                <h5 class="modal-title" id="createCriticiteLabel">Créer une Criticité</h5>
                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createCriticiteForm">
                    <div class="form-group">
                        <label for="CriticiteNom" class="form-label">Nom de la Criticité</label>
                        <input id="CriticiteNom" name="CriticiteNom" class="form-control" placeholder="Entrez le nom de la criticité" />
                        <span class="text-danger" id="criticiteNomError"></span>
                    </div>
                    <div class="form-group">
                        <label for="Couleur" class="form-label">Couleur</label>
                        <select id="Couleur" name="Couleur" class="form-control">
                            <option value="">-- Sélectionnez une couleur --</option>
                            <option value="red">Rouge</option>
                            <option value="orange">Orange</option>
                            <option value="yellow">Jaune</option>
                            <option value="blue">Bleu</option>
                            <option value="green">Vert</option>
                            <option value="purple">Violet</option>
                            <option value="pink">Rose</option>
                            <option value="gray">Gris</option>
                            <option value="brown">Marron</option>
                            <option value="cyan">Cyan</option>
                            <option value="lime">Lime</option>
                        </select>
                        <span class="text-danger" id="couleurError"></span>
                    </div>
                    <div class="form-group">
                        <label for="Descriptions" class="form-label">Description</label>
                        <textarea id="Descriptions" name="Descriptions" class="form-control" placeholder="Ajoutez une description si nécessaire"></textarea>
                        <span class="text-danger" id="descriptionError"></span>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-black" data-bs-dismiss="modal">Annuler</button>
                <button type="button" id="saveCriticiteBtn" class="btn btn-danger">Enregistrer</button>
            </div>
        </div>
    </div>
</div>



document.getElementById("saveCriticiteBtn").addEventListener("click", function () {
    // Récupérer les données du formulaire
    var formData = {
        CriticiteNom: document.getElementById("CriticiteNom").value,
        Couleur: document.getElementById("Couleur").value,
        Descriptions: document.getElementById("Descriptions").value
    };

    // Vérification des doublons
    fetch('/Criticite/CheckDuplicate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ CriticiteNom: formData.CriticiteNom })
    })
        .then(response => response.json())
        .then(data => {
            if (data.exists) {
                alert("Une criticité avec ce nom existe déjà !");
            } else {
                // Envoi du formulaire
                fetch('/Criticite/CreateCriticite', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            alert("Criticité ajoutée avec succès !");
                            location.reload();
                        } else {
                            alert("Erreur lors de la création de la criticité !");
                        }
                    });
            }
        });
});




[HttpPost]
public JsonResult CheckDuplicate(string CriticiteNom)
{
    bool exists = _context.Criticites.Any(c => c.CriticiteNom == CriticiteNom);
    return Json(new { exists });
}

