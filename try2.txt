<div class="card-body">
    <!-- Description -->
    <div class="d-flex justify-content-between align-items-center">
        <p id="descriptionDisplay" class="editable-field">
            <strong>Description:</strong> @Model.Description
            <i class="fas fa-edit ms-2 text-primary edit-icon" data-field="description"></i>
        </p>
        <input type="text" id="descriptionInput" class="form-control d-none editable-input" value="@Model.Description" />
    </div>

    <!-- Origine -->
    <div class="d-flex justify-content-between align-items-center">
        <p id="origineDisplay" class="editable-field">
            <strong>Origine:</strong> @Model.Origine?.OrigineNom
            <i class="fas fa-edit ms-2 text-primary edit-icon" data-field="origine"></i>
        </p>
        <select id="origineInput" class="form-control d-none editable-input">
            @foreach (var origine in ViewBag.Origines as List<Origine>)
            {
                <option value="@origine.OrigineId" @(Model.OrigineId == origine.OrigineId ? "selected" : "")>
                    @origine.OrigineNom
                </option>
            }
        </select>
    </div>

    <!-- Impact -->
    <div class="d-flex justify-content-between align-items-center">
        <p id="impactDisplay" class="editable-field">
            <strong>Impact:</strong> @Model.Impact
            <i class="fas fa-edit ms-2 text-primary edit-icon" data-field="impact"></i>
        </p>
        <textarea id="impactInput" class="form-control d-none editable-input">@Model.Impact</textarea>
    </div>
</div>




<script>
    document.querySelectorAll('.edit-icon').forEach(icon => {
        icon.addEventListener('click', function () {
            const field = this.dataset.field;

            // Affiche le champ d'entrée
            document.getElementById(`${field}Display`).classList.add('d-none');
            document.getElementById(`${field}Input`).classList.remove('d-none');
        });
    });

    // Gestion de la perte de focus pour enregistrer les modifications
    document.querySelectorAll('.editable-input').forEach(input => {
        input.addEventListener('blur', async function () {
            const field = this.id.replace('Input', '');
            const newValue = this.value;

            // Cache le champ d'entrée et affiche la valeur modifiée
            document.getElementById(`${field}Input`).classList.add('d-none');
            document.getElementById(`${field}Display`).classList.remove('d-none');
            document.getElementById(`${field}Display`).innerHTML = `<strong>${field.charAt(0).toUpperCase() + field.slice(1)}:</strong> ${newValue} <i class="fas fa-edit ms-2 text-primary edit-icon" data-field="${field}"></i>`;

            // Envoi de la requête pour mettre à jour le champ dans la base de données
            await fetch('/Incident/UpdateField', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id: @Model.IncidentId, field: field, value: newValue })
            });
        });
    });
</script>




[HttpPost]
public async Task<IActionResult> UpdateField(int id, string field, string value)
{
    var incident = await _context.Incidents.FindAsync(id);
    if (incident == null) return NotFound();

    switch (field)
    {
        case "description":
            incident.Description = value;
            break;
        case "origine":
            incident.OrigineId = int.TryParse(value, out var origineId) ? origineId : (int?)null;
            break;
        case "impact":
            incident.Impact = value;
            break;
        default:
            return BadRequest();
    }

    await _context.SaveChangesAsync();
    return Ok();
}


.edit-icon {
    cursor: pointer;
    transition: color 0.3s ease;
}
.edit-icon:hover {
    color: darkblue;
}
.editable-input {
    width: 100%;
    margin-top: 0.5rem;
}



