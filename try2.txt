voici ma methode GET et CREATE pour incident

// GET: Incident/Create
        public IActionResult Create()
        {
            // Remplir les ViewBag pour les sélections
            ViewBag.EquipeId = _context.Equipes.Select(e => new SelectListItem
            {
                Value = e.EquipeId.ToString(),
                Text = e.NomEquipe
            }).ToList();

            ViewBag.AppId = _context.Applicatifs.Select(a => new SelectListItem
            {
                Value = a.AppId.ToString(),
                Text = a.AppNom
            }).ToList();

            ViewBag.CriticiteId = _context.Criticites.Select(c => new SelectListItem
            {
                Value = c.CriticiteId.ToString(),
                Text = c.CriticiteNom
            }).ToList();

            ViewBag.StatutId = _context.Statuts.Select(s => new SelectListItem
            {
                Value = s.StatutId.ToString(),
                Text = s.StatutNom
            }).ToList();

            ViewBag.OrigineId = _context.Origines
                .Where(o => o.OrigineNom != null) // Filtrer les valeurs NULL
                .Select(o => new SelectListItem
                {
                    Value = o.OrigineId.ToString(),
                    Text = o.OrigineNom
                }).ToList();

            return View();
        }

        // POST: Incident/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("IncidentId,Description,DestinataireSup,CriticiteId,StatutId,AppId,Titre,Pec,RefTicket,LienTicket,Debutdimpact,Datepriseencharge,Impact,EquipeId")] Incident incident, string OrigineNom)
        {
            if (ModelState.IsValid)
            {
                // Normaliser le nom de l'origine pour la comparaison
                var normalizedOrigineNom = OrigineNom.Trim().ToUpper(); // Convert to capital lettrs

                // Vérifiez si une origine similaire existe déjà
                var existingOrigine = await _context.Origines
                    .FirstOrDefaultAsync(o => o.OrigineNom.ToUpper() == normalizedOrigineNom);

                if (existingOrigine == null)
                {
                    // Vérifiez les origines existantes pour des correspondances similaires
                    var similarOrigines = await _context.Origines
                        .Where(o => o.OrigineNom.ToUpper().Contains(normalizedOrigineNom) ||
                                     normalizedOrigineNom.Contains(o.OrigineNom.ToUpper()))
                        .ToListAsync();

                    if (similarOrigines.Any())
                    {
                        // Utilisez l'origine existante si une correspondance similaire est trouvée
                        incident.OrigineId = similarOrigines.First().OrigineId;
                    }
                    else
                    {
                        // Si aucune origine similaire, ajoutez une nouvelle origine
                        var newOrigine = new Origine { OrigineNom = normalizedOrigineNom }; // Utiliser le nom normalisé
                        _context.Origines.Add(newOrigine);
                        await _context.SaveChangesAsync();
                        incident.OrigineId = newOrigine.OrigineId;
                    }
                }
                else
                {
                    // Si une origine exacte existe, utilisez son ID
                    incident.OrigineId = existingOrigine.OrigineId;
                }

                using (var transaction = await _context.Database.BeginTransactionAsync())
                {
                    try
                    {
                        _context.Add(incident);
                        await _context.SaveChangesAsync(); 

                        await _context.SaveChangesAsync(); 
                        await transaction.CommitAsync();
                        return RedirectToAction(nameof(Index));
                    }
                    catch (Exception ex)
                    {
                        await transaction.RollbackAsync();
                        throw;
                    }
                }
            }

            ViewBag.EquipeId = _context.Equipes.Select(e => new SelectListItem
            {
                Value = e.EquipeId.ToString(),
                Text = e.NomEquipe
            }).ToList();

            ViewBag.AppId = _context.Applicatifs.Select(a => new SelectListItem
            {
                Value = a.AppId.ToString(),
                Text = a.AppNom
            }).ToList();

            ViewBag.CriticiteId = _context.Criticites.Select(c => new SelectListItem
            {
                Value = c.CriticiteId.ToString(),
                Text = c.CriticiteNom
            }).ToList();

            ViewBag.StatutId = _context.Statuts.Select(s => new SelectListItem
            {
                Value = s.StatutId.ToString(),
                Text = s.StatutNom
            }).ToList();

            ViewBag.OrigineId = _context.Origines.Select(o => new SelectListItem
            {
                Value = o.OrigineId.ToString(),
                Text = o.OrigineNom
            }).ToList();

            return View(incident);
        }

voici mon modele pour INCIDENT 
using System;
using System.Collections.Generic;

#nullable disable

namespace NotifApps.Models
{

    public partial class Incident
    {
        public Incident()
        {
            ApplicationIncidents = new HashSet<ApplicationIncident>();
            PlanDactions = new List<PlanDaction>();
    }

        public int IncidentId { get; set; }
        public string Description { get; set; }
        public string DestinataireSup { get; set; }
        public int? OrigineId { get; set; }
        public int? CriticiteId { get; set; }
        public int? StatutId { get; set; }
        public int? AppId { get; set; }
        public string Titre { get; set; }
        public string Pec { get; set; }
        public string RefTicket { get; set; }
        public string LienTicket { get; set; }
        public DateTime? Debutdimpact { get; set; }
        public DateTime? Datepriseencharge { get; set; }
        public string Impact { get; set; }
        public int? PecId { get; set; }
        public int? EquipeId { get; set; }
        public virtual Equipe Equipe { get; set; }
        public virtual Applicatif App { get; set; }
        public virtual Criticite Criticite { get; set; }
        public virtual Origine Origine { get; set; }
        public virtual Statut Statut { get; set; }
        public virtual ICollection<ApplicationIncident> ApplicationIncidents { get; set; }
        public virtual ICollection<PlanDaction> PlanDactions { get; set; }

    }

}

voici mon modele criticite 
using System;
using System.Collections.Generic;

#nullable disable

namespace NotifApps.Models
{
    public partial class Criticite
    {
        public Criticite()
        {
            Incidents = new HashSet<Incident>(); //type specification
        }

        public int CriticiteId { get; set; }
        public string CriticiteNom { get; set; }
        public string? Couleur { get; set; }
        public string? Descriptions { get; set; }

        // new properties
        public DateTime DateCreation { get; set; } = DateTime.Now; // defaultvalue system actual date
        public DateTime? DateDesactivation { get; set; } // Nullable
        public string Statut { get; set; } // Peut être "Actif" ou "Inactif"
        public virtual ICollection<Incident> Incidents { get; set; }
    }
}

j'aimerais que quand je declare un incident, j'aimerais que la criticite dont le statut est "Inactif" ne s'affiche pas dans le viewbag de selection 
ca affiche juste ceux dont le statut est "Actif"
