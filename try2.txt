[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Create(Applicatif applicatif, List<Address> addresses, bool forceCreate = false)
{
    if (ModelState.IsValid)
    {
        ViewBag.HebergementOptions = new List<string> { "Centrale", "Locale" };
        ViewBag.AddressTypes = _context.AddressTypes.ToList();
        ViewBag.StatutId = _context.StatutApplicatifs.Select(s => new SelectListItem
        {
            Value = s.StatutId.ToString(),
            Text = s.StatutNom
        }).ToList();

        using (var transaction = await _context.Database.BeginTransactionAsync())
        {
            try
            {
                // Vérification de l'existence d'un applicatif avec le même nom
                var existingApplicatif = await _context.Applicatifs
                    .FirstOrDefaultAsync(c => c.AppNom == applicatif.AppNom);

                if (existingApplicatif != null && !forceCreate)
                {
                    ViewBag.ExistingApplicatif = true;
                    ViewBag.AppNom = applicatif.AppNom;
                    return View(applicatif);
                }

                // Vérification des adresses similaires
                foreach (var address in addresses)
                {
                    var existingAddress = await _context.Addresses
                        .FirstOrDefaultAsync(a => a.Type == address.Type && a.Value == address.Value);

                    if (existingAddress != null && !forceCreate)
                    {
                        ViewBag.ExistingAddress = true;
                        ViewBag.AddressType = address.Type;
                        ViewBag.AddressValue = address.Value;
                        ViewBag.Applicatif = applicatif;
                        ViewBag.Addresses = addresses;
                        return View(applicatif);
                    }
                }

                _context.Add(applicatif);
                await _context.SaveChangesAsync();

                // Enregistrer les adresses
                foreach (var address in addresses)
                {
                    address.AppId = applicatif.AppId;
                    _context.Addresses.Add(address);
                }

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                return RedirectToAction(nameof(Index));
            }
            catch (Exception)
            {
                await transaction.RollbackAsync();
                throw;
            }
        }
    }

    ViewBag.HebergementOptions = new List<string> { "Centrale", "Locale" };
    ViewBag.AddressTypes = _context.AddressTypes.ToList();
    ViewBag.StatutId = _context.StatutApplicatifs.Select(s => new SelectListItem
    {
        Value = s.StatutId.ToString(),
        Text = s.StatutNom
    }).ToList();

    return View(applicatif);
}



@if (ViewBag.ExistingAddress != null && (bool)ViewBag.ExistingAddress)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header bg-warning-subtle border-black">
                    <h5 class="modal-title">Adresse similaire détectée</h5>
                    <i class="fas fa-exclamation-triangle ms-4"></i>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body bg-light-subtle">
                    <p>L'adresse <strong>@ViewBag.AddressValue</strong> de type <strong>@ViewBag.AddressType</strong> existe déjà. Voulez-vous continuer ?</p>
                </div>
                <div class="modal-footer bg-warning-subtle">
                    <form asp-action="Create" method="post">
                        <input type="hidden" name="forceCreate" value="true" />
                        <input type="hidden" name="AppNom" value="@ViewBag.Applicatif.AppNom" />
                        <input type="hidden" name="Descriptif" value="@ViewBag.Applicatif.Descriptif" />
                        <input type="hidden" name="StatutId" value="@ViewBag.Applicatif.StatutId" />
                        <input type="hidden" name="Hebergement" value="@ViewBag.Applicatif.Hebergement" />
                        <input type="hidden" name="LienWeb" value="@ViewBag.Applicatif.LienWeb" />
                        @for (int i = 0; i < ViewBag.Addresses.Count; i++)
                        {
                            <input type="hidden" name="addresses[@i].Type" value="@ViewBag.Addresses[i].Type" />
                            <input type="hidden" name="addresses[@i].Value" value="@ViewBag.Addresses[i].Value" />
                        }
                        <button type="submit" class="btn btn-danger">Oui</button>
                    </form>
                    <button type="button" class="btn btn-black" onclick="closeModal()">Non</button>
                </div>
            </div>
        </div>
    </div>
}









==========================================================================================================================================
// GET: Create
public IActionResult Create()
{
    ViewBag.HebergementOptions = new List<string> { "Centrale", "Locale" };
    ViewBag.AddressTypes = _context.AddressTypes.ToList();
    ViewBag.StatutId = _context.StatutApplicatifs.Select(s => new SelectListItem
    {
        Value = s.StatutId.ToString(),
        Text = s.StatutNom
    }).ToList();

    return View();
}

// POST: Create
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Create(Applicatif applicatif, List<Address> addresses, bool confirmContinue = false)
{
    if (!ModelState.IsValid)
    {
        ViewBag.HebergementOptions = new List<string> { "Centrale", "Locale" };
        ViewBag.AddressTypes = _context.AddressTypes.ToList();
        ViewBag.StatutId = _context.StatutApplicatifs.Select(s => new SelectListItem
        {
            Value = s.StatutId.ToString(),
            Text = s.StatutNom
        }).ToList();

        return View(applicatif);
    }

    // Vérification du nom d'applicatif
    var existingApplicatif = await _context.Applicatifs.FirstOrDefaultAsync(a => a.AppNom == applicatif.AppNom);

    if (existingApplicatif != null && !confirmContinue)
    {
        return Json(new
        {
            duplicateApplicatif = true,
            message = $"L'applicatif '{applicatif.AppNom}' existe déjà. Voulez-vous continuer ?"
        });
    }

    // Vérification des adresses
    var duplicateAddresses = new List<string>();
    foreach (var address in addresses)
    {
        if (await _context.Addresses.AnyAsync(a => a.Value == address.Value))
        {
            duplicateAddresses.Add(address.Value);
        }
    }

    if (duplicateAddresses.Any() && !confirmContinue)
    {
        return Json(new
        {
            duplicateAddresses = true,
            addresses = duplicateAddresses,
            message = "Les adresses suivantes existent déjà : " + string.Join(", ", duplicateAddresses) + ". Voulez-vous continuer ?"
        });
    }

    using (var transaction = await _context.Database.BeginTransactionAsync())
    {
        try
        {
            _context.Add(applicatif);
            await _context.SaveChangesAsync();

            foreach (var address in addresses)
            {
                address.AppId = applicatif.AppId;
                _context.Addresses.Add(address);
            }

            await _context.SaveChangesAsync();
            await transaction.CommitAsync();

            return Json(new { success = true });
        }
        catch (Exception ex)
        {
            await transaction.RollbackAsync();
            return Json(new { success = false, error = ex.Message });
        }
    }
}



@model NotifApps.Models.Applicatif

@{
    ViewData["Title"] = "Création d'applicatif";
}

<div class="container mt-5">
    <div class="card card">
        <div class="card-header bg-black text-center text-white">
            <h2>Création d'applicatif</h2>
        </div>
        <div class="card-body">
            <form id="applicatifForm" method="post">
                <div class="form-group mb-3">
                    <label>Nom</label>
                    <input asp-for="AppNom" class="form-control" placeholder="Entrez un nom" />
                    <span asp-validation-for="AppNom" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label>Description</label>
                    <textarea asp-for="Descriptif" class="form-control" placeholder="Ajoutez une description"></textarea>
                    <span asp-validation-for="Descriptif" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label for="Hebergement">Lieu de déploiement</label>
                    <select name="Hebergement" class="form-control">
                        <option value="">-- Sélectionnez --</option>
                        @if (ViewBag.HebergementOptions != null)
                        {
                            foreach (var hebergement in ViewBag.HebergementOptions)
                            {
                                <option value="@hebergement">@hebergement</option>
                            }
                        }
                    </select>
                </div>

                <div class="form-group mb-3">
                    <label>Lien</label>
                    <input asp-for="LienWeb" class="form-control" placeholder="Entrez un lien" />
                    <span asp-validation-for="LienWeb" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label>Statut</label>
                    <select asp-for="StatutId" class="form-control" asp-items="ViewBag.StatutId">
                        <option value="">-- Sélectionnez --</option>
                    </select>
                    <span asp-validation-for="StatutId" class="text-danger"></span>
                </div>

                <div id="address-container">
                    <!-- Addresses -->
                </div>

                <div class="form-group d-flex justify-content-center mt-3">
                    <button type="button" class="btn btn-danger mx-2" onclick="submitForm(false)">Créer</button>
                    <a asp-action="Index" class="btn btn-secondary mx-2">Annuler</a>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="modalMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-primary" onclick="submitForm(true)">Continuer</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function submitForm(confirmContinue) {
            const form = document.getElementById('applicatifForm');
            const formData = new FormData(form);

            formData.append('confirmContinue', confirmContinue);

            const response = await fetch('@Url.Action("Create")', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.duplicateApplicatif || result.duplicateAddresses) {
                const message = result.message;
                document.getElementById('modalMessage').innerText = message;
                const modal = new bootstrap.Modal(document.getElementById('confirmationModal'));
                modal.show();
            } else if (result.success) {
                window.location.href = '@Url.Action("Index")';
            } else {
                alert('Erreur : ' + result.error);
            }
        }
    </script>
}
