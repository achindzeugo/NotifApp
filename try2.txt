public IActionResult GetIncidentsByTimePeriod(int year, string filterType)
{
    var incidents = _context.Incidents
        .Where(i => i.Debutdimpact.HasValue && i.Debutdimpact.Value.Year == year)
        .ToList();

    var groupedData = filterType switch
    {
        "week" => incidents
            .GroupBy(i => CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(
                i.Debutdimpact.Value, CalendarWeekRule.FirstDay, DayOfWeek.Monday))
            .Select(g => new
            {
                Week = g.Key,
                Count = g.Count()
            }),
        "month" => incidents
            .GroupBy(i => i.Debutdimpact.Value.Month)
            .Select(g => new
            {
                Month = g.Key,
                Count = g.Count()
            }),
        _ => Enumerable.Empty<object>()
    };

    return Json(groupedData);
}



<div class="d-flex justify-content-center mb-4">
    <select id="yearFilter" class="form-select w-25 me-2">
        <option value="2023">2023</option>
        <option value="2024" selected>2024</option>
    </select>
    <select id="timeFilter" class="form-select w-25">
        <option value="month">Mois</option>
        <option value="week">Semaine</option>
    </select>
    <button id="applyFilter" class="btn btn-primary ms-2">Filtrer</button>
</div>





<div class="col-md-6 ms-2 flex-fill">
    <div class="card">
        <div class="chart-container">
            <canvas id="chart3"></canvas>
        </div>
    </div>
</div>


document.getElementById('applyFilter').addEventListener('click', () => {
    const year = document.getElementById('yearFilter').value;
    const filterType = document.getElementById('timeFilter').value;

    fetch(`/Homes/GetIncidentsByTimePeriod?year=${year}&filterType=${filterType}`)
        .then(response => response.json())
        .then(data => {
            const labels = data.map(d => filterType === 'month' ? 
                new Date(0, d.Month - 1).toLocaleString('default', { month: 'short' }) : `Semaine ${d.Week}`);
            const counts = data.map(d => d.Count);

            const ctx3 = document.getElementById('chart3').getContext('2d');
            new Chart(ctx3, {
                type: 'line',
                data: {
                    labels,
                    datasets: [{
                        label: `Incidents par ${filterType === 'month' ? 'mois' : 'semaine'} (${year})`,
                        data: counts,
                        borderColor: 'blue',
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: true },
                        tooltip: { enabled: true }
                    }
                }
            });
        });
});

