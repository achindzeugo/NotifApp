<button class="btn btn-info ms-2 btn-sm" title="Tester Connectivité" onclick="testConnectivity(@item.AppId)">
    <i class="fas fa-network-wired"></i> Tester
</button>


<script>
    function testConnectivity(appId) {
        fetch(`/Applicatifs/TestConnectivity?id=${appId}`)
            .then(response => response.json())
            .then(data => {
                const resultsList = document.getElementById('connectivityResults');
                resultsList.innerHTML = ''; // Clear previous results

                if (data.success) {
                    data.results.forEach(result => {
                        const listItem = document.createElement('li');
                        listItem.className = 'list-group-item';
                        listItem.textContent = `Adresse: ${result.Address}, Type: ${result.Type}, Statut: ${result.Status}, Temps: ${result.RoundTripTime || 'N/A'}ms`;
                        resultsList.appendChild(listItem);
                    });
                } else {
                    const listItem = document.createElement('li');
                    listItem.className = 'list-group-item text-danger';
                    listItem.textContent = data.message;
                    resultsList.appendChild(listItem);
                }

                // Show the modal
                new bootstrap.Modal(document.getElementById('connectivityModal')).show();
            })
            .catch(error => {
                console.error('Erreur lors du test de connectivité:', error);
                alert('Une erreur est survenue lors du test de connectivité.');
            });
    }
</script>



[HttpGet]
public async Task<IActionResult> TestConnectivity(int id)
{
    var applicatif = await _context.Applicatifs
        .Include(a => a.Addresses)
        .FirstOrDefaultAsync(a => a.AppId == id);

    if (applicatif == null || applicatif.Addresses == null || !applicatif.Addresses.Any())
    {
        return Json(new { success = false, message = "Aucune adresse trouvée pour cet applicatif." });
    }

    var results = new List<object>();
    foreach (var address in applicatif.Addresses)
    {
        try
        {
            using (var ping = new System.Net.NetworkInformation.Ping())
            {
                var reply = ping.Send(address.Value);
                results.Add(new
                {
                    Type = address.Type,
                    Address = address.Value,
                    Status = reply.Status.ToString(),
                    RoundTripTime = reply.RoundtripTime
                });
            }
        }
        catch (Exception ex)
        {
            results.Add(new
            {
                Type = address.Type,
                Address = address.Value,
                Status = "Erreur",
                Message = ex.Message
            });
        }
    }

    return Json(new { success = true, results });
}



<div class="modal fade" id="connectivityModal" tabindex="-1" aria-labelledby="connectivityModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="connectivityModalLabel">Résultats de Connectivité</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul id="connectivityResults" class="list-group">
                    <!-- Résultats des tests -->
                </ul>
            </div>
        </div>
    </div>
</div>


<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>

