@model NotifApps.Models.Incident

@{
    string statutColor = Model.Statut?.StatutNom switch
    {
        "En cours" => "bg-en-cours",
        "Résolu" => "bg-resolu",
        "Clos" => "bg-clos",
        _ => "bg-default"
    };
}

<h1 class="text-center text-black">Détails de l'Incident</h1>

<hr />

<div class="container mt-4">
    <div class="card mb-4">
        <!-- Premier segment: Statut de l'incident -->
        <div class="card-header @statutColor text-white d-flex justify-content-between align-items-center">
            <h1 class="text-center w-100">Incident @Model.Statut?.StatutNom</h1>
            <span class="badge @statutColor">@Model.Statut?.StatutNom</span>
        </div>
        <div class="card-body">
            <h1 class="text-center font-weight-bold">@Model.Titre</h1>

            <!-- Applicatif et Criticité -->
            <div class="d-flex justify-content-between align-items-center">
                <p class="w-50"><strong>Applicatif:</strong> @Model.App?.AppNom</p>
                <p class=" w-100">
                    <strong>Criticité:</strong>
                    <span class="badge text-black" style="background-color: @(Model.Criticite?.Couleur ?? "gray");">
                        @(Model.Criticite?.CriticiteNom?.ToUpper() ?? "N/A")
                    </span>
                </p>
            </div>

            <!-- Référence du ticket et lien -->
            <div class="d-flex justify-content-between align-items-center">
                <p class="w-50"><strong>Référence du ticket:</strong> @Model.RefTicket</p>
                <p class=" w-100"><strong>Lien du ticket:</strong> <a href="@Model.LienTicket" target="_blank">@Model.LienTicket</a></p>
            </div>

            <!-- Prise en charge -->
            <p class="text-start"><strong>Prise en charge par:</strong> @Model.Equipe?.NomEquipe</p>
        </div>

        <!-- Deuxième segment: Resumé -->
        <div class="card-header @statutColor text-white d-flex justify-content-between align-items-center">
            <h1 class="w-100 text-center">Resumé</h1>
            <i class="fa fa-sticky-note m-md-2"></i>
        </div>
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center text-black">
                <p class=""><strong>Début d'impact:</strong> @Model.Debutdimpact?.ToString("g")</p>
                <p class=""><strong>Date de prise en charge:</strong> @Model.Datepriseencharge?.ToString("g")</p>
                <p>
                    <strong>Date de Résolution :</strong>
                    @(Model.Dateresolution.HasValue
                        ? Model.Dateresolution?.ToString("dd MMMM yyyy HH:mm:ss")
                        : "Non résolu")
                </p>

            </div>
            <p class="text-start"><strong>Description:</strong> @Model.Description</p>
            <p class="text-start"><strong>Origine:</strong> @Model.Origine?.OrigineNom</p>
        </div>

        <!-- Troisième segment: Impact -->
        <div class="card-header @statutColor text-white d-flex justify-content-between align-items-center">
            <h1 class="w-100 text-center">Impact</h1>
            <i class="fas fa-exclamation-circle mx-5"></i>
        </div>
        <div class="card-body">
            <br />
            <p class="text-start"><strong>Impact:</strong> @Model.Impact</p>
            <br />
        </div>

        <!-- Plans d'actions section -->
        <div class="card-header @statutColor text-white d-flex justify-content-between align-items-center">
            <h1 class="w-100 text-center">Plan d'action</h1>
            <i class="fa fa-puzzle-piece"></i>
        </div>
        
        <div class="card-body">
            <div id="planForm" style="display:none;">
                <form asp-action="AddPlanDaction" method="post">
                    <input type="hidden" name="IncidentId" value="@Model.IncidentId" />
                    <div class="form-group">
                        <label for="PlanDescription">Plan d'Action:</label>
                        <textarea type="text" class="form-control" name="PlanDescription" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="DateReelle">Date et Heure Réelle:</label>
                        <input type="datetime-local" class="form-control" name="DateReelle" />
                    </div>
                    <div class="d-flex justify-content-center">
                        <button type="submit" class="btn btn-danger ms-2 mt-2"><i class="fas fa-save"></i></button>
                        <button type="button" class="btn btn-black ms-2 mt-2" id="closePlanForm"><i class="fas fa-ban"></i></button>
                    </div>
                </form>
            </div>
            <hr />
            <div class="d-flex justify-content-between align-items-center">
                <button id="togglePlanForm" class="btn btn-black" readonly><i class="fas fa-plus "></i> Plan d'Action</button>
            </div>

            <hr />

            @if (Model.PlanDactions != null && Model.PlanDactions.Any()) 
{
    foreach (var plan in Model.PlanDactions.OrderByDescending(p => p.DateReelle))
    {
        <div class="alert alert-black d-flex justify-content-between align-items-center">
            <div>
                <strong>Plan:</strong> @plan.PlanDescription
                <br />
                <strong>Date et heure:</strong> @plan.DateReelle?.ToString("g")
            </div>
            <div>
                <a href="@Url.Action("EditPlanDaction", new { id = plan.PlanId })" class="text-black me-2" title="Modifier">
                    <i class="fas fa-edit"></i>
                </a>
                <form asp-action="DeletePlanDaction" method="post" style="display:inline;">
                    <input type="hidden" name="id" value="@plan.PlanId" />
                    <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Êtes-vous sûr de vouloir supprimer ce plan d\'action ?');">
                        <i class="fas fa-trash text-bg-danger"></i>
                    </button>
                </form>
            </div>
        </div>
    }
}
else
{
    <p>Aucun plan d'action ajouté.</p>
}

            <hr />
        </div>

        <div class="d-flex justify-content-center">
            <button type="submit" class="btn @statutColor text-white"><i class="fas fa-paper-plane text-white"></i> Envoyer</button>
        </div>
    </div>
</div>

<style>
    .bg-en-cours {
        background-color: orange !important;
    }

    .bg-resolu {
        background-color: green !important;
    }

    .bg-clos {
        background-color: blue !important;
    }

    .bg-default {
        background-color: gray !important;
    }

    .font-weight-bold {
        font-weight: bold;
    }

    .h4 {
        font-size: 1.5rem;
    }
</style>
<script>
    document.getElementById('togglePlanForm').addEventListener('click', function () {
        const form = document.getElementById('planForm');
        form.style.display = form.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('closePlanForm').addEventListener('click', function () {
        document.getElementById('planForm').style.display = 'none';
    });
    
</script>



je veux que vous recomenciez, voici mon controller, servez vous de ca pour que les modofications soient enregistrés et ajoutez un bouton save
je precise que c'est lorsque je defile avec la souris sur l'élément que l'icone de modification se montre 
et quand j'appuie sa ouvre le champs de modification en textArea avec un bouton pour enregistrer les modifications 
====================================================================================================================================================================================

[HttpPost]
public async Task<IActionResult> UpdateField(int id, string field, string value)
{
    var incident = await _context.Incidents.FindAsync(id);
    if (incident == null) return NotFound();

    switch (field)
    {
        case "description":
            incident.Description = value;
            break;
        case "impact":
            incident.Impact = value;
            break;
        case "statut":
            if (int.TryParse(value, out var statutId))
                incident.StatutId = statutId;
            else
                return BadRequest("Invalid statut ID");
            break;
        case "refticket":
            incident.RefTicket = value;
            break;
        case "lienticket":
            incident.LienTicket = value;
            break;
        default:
            return BadRequest();
    }

    await _context.SaveChangesAsync();
    return Ok();
}

document.addEventListener("DOMContentLoaded", () => {
    const setupEditableField = (fieldId) => {
        const display = document.getElementById(`${fieldId}-display`);
        const edit = document.getElementById(`${fieldId}-edit`);
        const editIcon = document.getElementById(`edit-${fieldId}`);
        const saveButton = document.getElementById(`save-${fieldId}`);

        editIcon.addEventListener("click", () => {
            display.classList.add("d-none");
            edit.classList.remove("d-none");
            saveButton.classList.remove("d-none");
        });

        saveButton.addEventListener("click", () => {
            const value = edit.value || edit.options?.[edit.selectedIndex]?.value;
            fetch(`/Incident/UpdateField`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value,
                },
                body: JSON.stringify({ id: @Model.IncidentId, field: fieldId, value }),
            })
                .then((response) => {
                    if (response.ok) {
                        display.textContent = value;
                        edit.classList.add("d-none");
                        saveButton.classList.add("d-none");
                        display.classList.remove("d-none");
                    } else {
                        alert("Erreur lors de la sauvegarde.");
                    }
                });
        });
    };

    setupEditableField("description");
    setupEditableField("impact");
    setupEditableField("statut");
    setupEditableField("refticket");
    setupEditableField("lienticket");
});


@foreach (var statut in ViewBag.Statuts)
{
    <option value="@statut.Value" @(statut.Value == Model.StatutId.ToString() ? "selected" : "")>
        @statut.Text
    </option>
}

<option value="@statut.Value" @(int.Parse(statut.Value) == Model.StatutId ? "selected" : "")>
    @statut.Text
</option>


<option value="@statut.Value" @(statut.Value == Model.StatutId.ToString() ? "selected" : "")>
    @statut.Text
</option>





