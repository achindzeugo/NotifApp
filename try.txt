using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using NotifApps.Models;
using OfficeOpenXml;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using MailKit.Net.Smtp;
using MimeKit;
using System;

namespace NotifApps.Controllers
{
    public class EquipesController : Controller
    {
        private readonly NotifdbContext _context;

        public EquipesController(NotifdbContext context)
        {
            _context = context;
        }

        //BREADCRUMB................................
        public List<BreadcrumbItem> GetBreadcrumb(string page)
        {
            var breadcrumb = new List<BreadcrumbItem>
       {
           new BreadcrumbItem { Title = "Homes", Url = Url.Action("Index", "Homes"), IsActive = false }
       };

            switch (page)
            {
                case "Index":
                    breadcrumb.Add(new BreadcrumbItem { Title = "Index", Url = Url.Action("Index", "Equipes"), IsActive = true });
                    break;
                case "Create":
                    breadcrumb.Add(new BreadcrumbItem { Title = "Index", Url = Url.Action("Index", "Equipes"), IsActive = false });
                    breadcrumb.Add(new BreadcrumbItem { Title = "Create", Url = Url.Action("Create", "Equipes"), IsActive = true });
                    break;
                case "Details":
                    breadcrumb.Add(new BreadcrumbItem { Title = "Index", Url = Url.Action("Index", "Equipes"), IsActive = false });
                    breadcrumb.Add(new BreadcrumbItem { Title = "Details", Url = Url.Action("Details", "Equipes"), IsActive = true });
                    break;
                case "Edit":
                    breadcrumb.Add(new BreadcrumbItem { Title = "Index", Url = Url.Action("Index", "Equipes"), IsActive = false });
                    breadcrumb.Add(new BreadcrumbItem { Title = "Edit", Url = Url.Action("Edit", "Equipes"), IsActive = true });
                    break;
                case "AttachUtilisateur":
                    breadcrumb.Add(new BreadcrumbItem { Title = "Index", Url = Url.Action("Index", "Equipes"), IsActive = false });
                    breadcrumb.Add(new BreadcrumbItem { Title = "AttachUtilisateur", Url = Url.Action("AttachUtilisateur", "Equipes"), IsActive = true });
                    break;
                case "UploadTemplate":
                    breadcrumb.Add(new BreadcrumbItem { Title = "Index", Url = Url.Action("Index", "Equipes"), IsActive = false });
                    breadcrumb.Add(new BreadcrumbItem { Title = "UploadTemplate", Url = Url.Action("UploadTemplate", "Equipes"), IsActive = true });
                    break;
            }

            return breadcrumb;
        }


        // GET: Equipes
        public IActionResult Index(string searchString)
        {
            var breadcrumb = GetBreadcrumb("Index");
            ViewBag.Breadcrumb = breadcrumb;
            var equipes = _context.Equipes.ToList();
            if (equipes == null || !equipes.Any())
            {
                // Retourne une liste vide si aucune equipe n'est trouvée
                return View(new List<Equipe>());
            }

            if (!string.IsNullOrEmpty(searchString))
            {
                equipes = equipes.Where(u => u.NomEquipe.Contains(searchString)).ToList();
            }

            ViewBag.Utilisateurs = _context.Utilisateurs
               .Where(u => u.Statut == "Actif")
               .ToList();
            return View(equipes);
        }


        //STATUT SWIPE
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult ToggleStatus(int id)
        {
            // Récupérez la criticité à partir de la base de données
            var equipe = _context.Equipes.FirstOrDefault(c => c.EquipeId == id);

            string message = string.Empty;

            if (equipe != null)
            {
                if (equipe.Statut == "Actif")
                {
                    // Change le statut à Inactif et ajoute la date de désactivation
                    equipe.Statut = "Inactif";
                    equipe.DateDesactivation = DateTime.Now;
                    message = $"Vous venez de desactiver le statut de {equipe.NomEquipe}.";
                }
                else
                {
                    // Change le statut à Actif et retire la date de désactivation
                    equipe.Statut = "Actif";
                    equipe.DateDesactivation = null;
                    message = $"Vous venez dactiver le statut de {equipe.NomEquipe}.";
                }


                _context.SaveChanges();
            }
            TempData["Message"] = message;
            return RedirectToAction(nameof(Index));
        }



        // GET: Equipes/Create
        public IActionResult Create()
        {
            var breadcrumb = GetBreadcrumb("Create");
            ViewBag.Breadcrumb = breadcrumb;
            ViewBag.Utilisateurs = _context.Utilisateurs
                .Where(u => u.Statut == "Actif")
                .ToList(); // Récupérer tous les utilisateurs
            return View();
        }

        // POST: Equipes/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("NomEquipe,Descriptions")] Equipe equipe, int[] selectedUsers, bool forceCreate = false)
        {
            if (ModelState.IsValid)
            {
                var existingEquipe = await _context.Equipes
                    .FirstOrDefaultAsync(c => c.NomEquipe == equipe.NomEquipe);

                if (existingEquipe != null && !forceCreate)
                {
                    ViewBag.ExistingEquipe = true;
                    ViewBag.NomEquipe = equipe.NomEquipe;
                    return View(equipe);
                }

                equipe.Statut = "Actif";

                if (string.IsNullOrEmpty(equipe.Descriptions))
                {
                    equipe.Descriptions = "RAS";
                }

                _context.Add(equipe);
                await _context.SaveChangesAsync();

                if (selectedUsers != null)
                {
                    foreach (var userId in selectedUsers)
                    {
                        var existingAssociation = await _context.EquipeUtilisateurs
                            .FirstOrDefaultAsync(eu => eu.EquipeId == equipe.EquipeId && eu.UtilisateursId == userId);

                        if (existingAssociation == null)
                        {
                            var equipeUtilisateur = new EquipeUtilisateur
                            {
                                EquipeId = equipe.EquipeId,
                                UtilisateursId = userId
                            };
                            _context.Add(equipeUtilisateur);
                        }
                    }
                    await _context.SaveChangesAsync();
                }

                return RedirectToAction("Index");
            }

            ViewBag.Utilisateurs = _context.Utilisateurs
                .Where(u => u.Statut == "Actif")
                .ToList();
            return View(equipe);
        }

        // GET: Equipes/CheckEquipeExists
        public async Task<IActionResult> CheckEquipeExists(string nomEquipe)
        {
            var existingEquipe = await _context.Equipes
                .FirstOrDefaultAsync(c => c.NomEquipe == nomEquipe);
            return Json(existingEquipe != null);
        }


        //GET : Vue de rattachement par selection
        public IActionResult AttachUtilisateur(int id)
        {
            var breadcrumb = GetBreadcrumb("AttachUtilisateur");
            ViewBag.Breadcrumb = breadcrumb;
            ViewBag.EquipeId = id;
            var utilisateurs = _context.Utilisateurs
                .Include(u => u.EquipeUtilisateur)
                .ThenInclude(eu => eu.Equipe)
                .ToList();

            // Get the IDs of users already associated with the team and remain marked
            var existingUserIds = _context.EquipeUtilisateurs
                .Where(eu => eu.EquipeId == id)
                .Select(eu => eu.UtilisateursId)
                .ToList();

            ViewBag.ExistingUserIds = existingUserIds;

            return View(utilisateurs);
        }

        // POST : RATTACHEMENT PAR SELECCTION
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> SaveUtilisateurs(int equipeId, int[] selectedUsers)
        {
            if (selectedUsers != null)
            {
                foreach (var userId in selectedUsers)
                {
                    // Check if the association already exists
                    var existingAssociation = await _context.EquipeUtilisateurs
                        .FirstOrDefaultAsync(eu => eu.EquipeId == equipeId && eu.UtilisateursId == userId);

                    if (existingAssociation == null) // Only add if the association does not exist
                    {
                        var equipeUtilisateur = new EquipeUtilisateur
                        {
                            EquipeId = equipeId,
                            UtilisateursId = userId
                        };

                        _context.Add(equipeUtilisateur);
                    }
                }
                await _context.SaveChangesAsync();
            }

            return RedirectToAction(nameof(Details), new { id = equipeId });
        }

        //Details EQUIPES
        public async Task<IActionResult> Details(int id)
        {
            var breadcrumb = GetBreadcrumb("Details");
            ViewBag.Breadcrumb = breadcrumb;
            var equipe = await _context.Equipes
                .Include(e => e.EquipeUtilisateurs) 
                .ThenInclude(eu => eu.Utilisateurs) 
                .FirstOrDefaultAsync(e => e.EquipeId == id);

            if (equipe == null)
            {
                return NotFound();
            }

            return PartialView("_Details", equipe);
        }

        // Creéation POST Utilisateur 
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> SaveUtilisateur(int equipeId, [Bind("NomUtilisateurs,PrenomUtilisateurs,Email,AG")] Utilisateurs utilisateur)
        {
            if (ModelState.IsValid)
            {
                _context.Add(utilisateur);
                await _context.SaveChangesAsync();

                // Create the association
                var equipeUtilisateur = new EquipeUtilisateur
                {
                    EquipeId = equipeId,
                    UtilisateursId = utilisateur.UtilisateursID 
                };

                _context.Add(equipeUtilisateur);
                await _context.SaveChangesAsync();

                return RedirectToAction(nameof(Details), new { id = equipeId });
            }
            ViewBag.Utilisateurs = _context.Utilisateurs
            .Where(u => u.Statut == "Actif")
            .ToList();
            return View(utilisateur);
        }
        // Action pour afficher le formulaire d'upload
        public IActionResult UploadTemplate(int equipeId)
        {
            var breadcrumb = GetBreadcrumb("UploadTemplate");
            ViewBag.Breadcrumb = breadcrumb;
            if (equipeId == 0)
            {
                return NotFound("L'équipe spécifiée est introuvable.");
            }

            // Transmettre l'ID de l'équipe à la vue via ViewBag
            ViewBag.EquipeId = equipeId;
            return PartialView("UploadTemplate");
        }

        // Action POST pour traiter l'upload
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> ProcessUpload(int equipeId, IFormFile ExcelFile)
        {
            // Vérification si l'ID de l'équipe est valide
            if (equipeId == 0)
            {
                return BadRequest("L'ID de l'équipe est manquant ou invalide.");
            }

            // Vérifiez si l'équipe existe dans la base de données
            var equipeExists = await _context.Equipes.AnyAsync(e => e.EquipeId == equipeId);
            if (!equipeExists)
            {
                return NotFound("L'équipe spécifiée est introuvable.");
            }

            if (ExcelFile != null && ExcelFile.Length > 0)
            {
                // Utilisation de EPPlus pour traiter le fichier Excel
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                using (var stream = new MemoryStream())
                {
                    await ExcelFile.CopyToAsync(stream);

                    using (var package = new ExcelPackage(stream))
                    {
                        var worksheet = package.Workbook.Worksheets.FirstOrDefault();

                        if (worksheet != null)
                        {
                            // Lecture des données du fichier Excel
                            for (int row = 2; row <= worksheet.Dimension.End.Row; row++) // Ignorer la première ligne (en-têtes)
                            {
                                var nom = worksheet.Cells[row, 1].Text?.Trim();
                                var prenom = worksheet.Cells[row, 2].Text?.Trim();
                                var email = worksheet.Cells[row, 3].Text?.Trim();
                                var ag = worksheet.Cells[row, 4].Text?.Trim();

                                if (string.IsNullOrWhiteSpace(nom) || string.IsNullOrWhiteSpace(email))
                                {
                                    continue; // Ignorez les lignes incomplètes
                                }

                                // Création d'un nouvel utilisateur
                                var utilisateur = new Utilisateurs
                                {
                                    NomUtilisateurs = nom,
                                    PrenomUtilisateurs = prenom,
                                    Email = email,
                                    AG = ag
                                };

                                // Ajout de l'utilisateur à la base de données
                                _context.Add(utilisateur);
                                await _context.SaveChangesAsync(); // Sauvegarder pour obtenir l'ID généré
                                // Création de l'association utilisateur-équipe
                                var equipeUtilisateur = new EquipeUtilisateur
                                {
                                    EquipeId = equipeId,
                                    UtilisateursId = utilisateur.UtilisateursID
                                };
                                _context.Add(equipeUtilisateur);
                            }

                            await _context.SaveChangesAsync();
                        }
                    }
                }

                // Redirection vers la page de détails ou confirmation
                return RedirectToAction(nameof(Details), new { id = equipeId });
            }

            // Si le fichier n'est pas valide, renvoyez la vue avec une erreur
            ModelState.AddModelError("ExcelFile", "Veuillez sélectionner un fichier Excel valide.");
            return View();
        }

        // GET: Equipes/Edit/5
        public async Task<IActionResult> Edit(int id)
        {
            var breadcrumb = GetBreadcrumb("Edit");
            ViewBag.Breadcrumb = breadcrumb;
            var equipe = await _context.Equipes
                .Include(e => e.EquipeUtilisateurs)
                .ThenInclude(eu => eu.Utilisateurs)
                .FirstOrDefaultAsync(e => e.EquipeId == id);

            if (equipe == null)
            {
                return NotFound();
            }

            // Obtenez uniquement les utilisateurs déjà associés
            var utilisateursAssocies = equipe.EquipeUtilisateurs.Select(eu => eu.Utilisateurs).ToList();

            // Enregistrez les utilisateurs associés dans ViewBag pour affichage initial
            ViewBag.UtilisateursAssocies = utilisateursAssocies;

            return View(equipe);

            /*            return PartialView("_Edit", equipe);
            */
        }


        //POST : EDit
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> SaveEdit(int equipeId, int[] selectedUsers, string statut, string Descriptions, string NomEquipe)
        {
            var equipe = await _context.Equipes
                .Include(e => e.EquipeUtilisateurs)
                .FirstOrDefaultAsync(e => e.EquipeId == equipeId);

            if (equipe == null)
            {
                return NotFound();
            }

            // Mise à jour du nom de l'équipe
            equipe.NomEquipe = NomEquipe;

            // Mise à jour de la description
            equipe.Descriptions = Descriptions;

            // Mise à jour du statut et de la date de désactivation
            if (statut == "Inactif" && equipe.Statut != "Inactif")
            {
                equipe.Statut = "Inactif";
                equipe.DateDesactivation = DateTime.Now;
            }
            else if (statut == "Actif" && equipe.Statut != "Actif")
            {
                equipe.Statut = "Actif";
                equipe.DateDesactivation = null;
            }

            // Mise à jour des utilisateurs associés
            var existingAssociations = equipe.EquipeUtilisateurs.ToList();
            _context.EquipeUtilisateurs.RemoveRange(existingAssociations);

            if (selectedUsers != null)
            {
                foreach (var userId in selectedUsers)
                {
                    _context.EquipeUtilisateurs.Add(new EquipeUtilisateur
                    {
                        EquipeId = equipeId,
                        UtilisateursId = userId
                    });
                }
            }

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!_context.Equipes.Any(e => e.EquipeId == equipeId))
                {
                    return NotFound();
                }
                throw;
            }
            return RedirectToAction(nameof(Index));

            /*            return RedirectToAction(nameof(Edit), new { id = equipeId });
            */
        }

        [HttpGet]
        public async Task<IActionResult> Search(string query)
        {
            if (string.IsNullOrEmpty(query))
            {
                return Json(new List<object>()); // Retourne une liste vide si aucun texte n'est saisi
            }

            // Rechercher les utilisateurs correspondant à la requête
            var utilisateurs = await _context.Utilisateurs
                .Where(u => u.NomUtilisateurs.Contains(query) || u.PrenomUtilisateurs.Contains(query))
                .Select(u => new
                {
                    utilisateursId = u.UtilisateursID,
                    nomUtilisateurs = u.NomUtilisateurs,
                    prenomUtilisateurs = u.PrenomUtilisateurs
                })
                .ToListAsync();

            return Json(utilisateurs); // Retourne les résultats sous forme de JSON
        }

        // GET: Equipes/Delete/5
        public async Task<IActionResult> Delete(int id)
        {
            var equipe = await _context.Equipes
                .Include(e => e.EquipeUtilisateurs) // Include associations
                .FirstOrDefaultAsync(e => e.EquipeId == id);

            if (equipe == null)
            {
                return NotFound();
            }

            return View(equipe);
        }

        // POST: Equipes/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            // Get the associations to remove
            var associations = await _context.EquipeUtilisateurs
                .Where(eu => eu.EquipeId == id)
                .ToListAsync();

            // Remove associations
            _context.EquipeUtilisateurs.RemoveRange(associations);

            // Remove the team
            var equipe = await _context.Equipes.FindAsync(id);
            if (equipe != null)
            {
                _context.Equipes.Remove(equipe);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }



    }
}

================================================================================================================================================


@model IEnumerable<NotifApps.Models.Equipe>

<h1>Liste des Équipes</h1>

<hr />
<p>
    <a asp-action="Create" class="btn btn-black">Ajouter équipe</a>
</p>

<div>
    <input type="text" id="searchInput" class="form-control" placeholder="Rechercher par nom d'équipe...">
    <button type="submit" class="btn btn-black mt-2 fas fa-search"></button>

</div>
<br />
<table class="table table" style="border-collapse: collapse;">
    <thead>
        <tr>
            <th class="bg-black text-white">ICONE</th>
            <th class="bg-black text-white">NOM</th>
            <th class="bg-black text-white">DESCRIPTION</th>
            <th class="bg-black text-white">STATUT</th>
            <th class="bg-black text-white">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var equipe in Model)
        {
            <tr>
                <!--<tr style="border-bottom: 2px solid #000;">-->
                <!-- Dark line -->
                <td><i class="fas fa-users fa-2x"></td>
                <td>@equipe.NomEquipe</td>

                <td>
                    @equipe.Descriptions
                </td>
                <td>
                    <form method="post" asp-action="ToggleStatus">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@equipe.EquipeId" />
                        <label class="switch">
                            <input type="checkbox"
                                   name="statut"
                                   onchange="this.form.submit()"
                                   @(equipe.Statut == "Actif" ? "checked" : "") />
                            <span class="slider"></span>
                        </label>
                    </form>
                </td>
                <td>
                    <button class="btn btn-black mx-2" title="Détails" onclick="loadDetails(@equipe.EquipeId)">
                        <i class="fa fa-list-alt"></i>
                    </button>


                    <a asp-action="Edit" asp-route-id="@equipe.EquipeId" class="btn btn-warning mx-2" title="Supprimer">
                        <i class="fas fa-edit"></i>
                    </a>

                    <button class="btn btn-primary" onclick="loadUploadTemplateForm(@equipe.EquipeId)">
                        <i class="fas fa-user-plus"></i>
                    </button>

                    <button class="btn btn-black" onclick="loadUploadTemplateForm(@equipe.EquipeId)"></button>
                </td>
            </tr>
        }
    </tbody>
</table>



@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


<script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function() {
            var message = '@TempData["Message"]';
            if (message) {
                alert(message);
            }
        });
</script>


<style>
    .table {
        border-top-color: red;
        border-top-style: solid;
        border-top-width: 5px;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }
</style>


<script>
    document.getElementById('searchInput').addEventListener('keyup', function () {
        var searchString = this.value.toLowerCase();
        var rows = document.querySelectorAll('tbody tr');

        rows.forEach(function (row) {
            var appName = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
            if (appName.includes(searchString)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });

</script>

<script>
    function showUserForm() {
        document.getElementById('userForm').style.display = 'block';
        document.getElementById('userList').style.display = 'none'; // hide users initially
    }

    function hideUserForm() {
        document.getElementById('userForm').style.display = 'none';
    }

    function filterUsers() {
        var input = document.getElementById('searchInput');
        var filter = input.value.toLowerCase();
        var userList = document.getElementById("userList");
        var checkboxes = userList.getElementsByClassName('form-check');

        // Afficher la liste des utilisateurs si une saisie est faite
        if (filter.length > 0) {
            userList.style.display = 'block';
        } else {
            userList.style.display = 'none'; // Masquer si le champ est vide
        }

        // Filtrer les utilisateurs en fonction de la saisie
        Array.from(checkboxes).forEach(function (checkbox) {
            var label = checkbox.querySelector('label');
            if (label && label.textContent.toLowerCase().includes(filter)) {
                checkbox.style.display = ''; // Afficher si correspondance
            } else {
                checkbox.style.display = 'none'; // Masquer sinon
            }
        });
    }
</script>

<style>
    .switch {
        position: relative;
        display: inline-block;
        width: 34px;
        height: 20px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 14px;
            width: 14px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

    input:checked + .slider {
        background-color: #4CAF50;
    }

        input:checked + .slider:before {
            transform: translateX(14px);
        }
</style>


<!-- Modal pour la création d'équipe -->
<div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-black text-white">
                <h5 class="modal-title" id="createModalLabel">Créer une Équipe</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Contenu du formulaire de création sera chargé ici -->
                <div id="createContent"></div>
            </div>
        </div>
    </div>
</div>

<script>
    function loadCreateForm() {
        $.ajax({
            url: '@Url.Action("Create", "Equipes")',
            type: 'GET',
            success: function (data) {
                $('#createContent').html(data);
                $('#createModal').modal('show');
            },
            error: function () {
                alert('Erreur lors du chargement du formulaire de création.');
            }
        });
    }
</script>


<!--====DETAILS EQUIPE====================================================================-->
<!-- Modal pour afficher les détails -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header bg-black text-white">
                <h5 class="modal-title" id="detailsModalLabel">Détails de l'Équipe</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Contenu des détails sera chargé ici -->
                <div id="detailsContent"></div>
            </div>
        </div>
    </div>
</div>

<script>
    function loadDetails(equipeId) {
        $.ajax({
            url: '@Url.Action("Details", "Equipes")/' + equipeId,
            type: 'GET',
            success: function (data) {
                $('#detailsContent').html(data);
                $('#detailsModal').modal('show');
            },
            error: function () {
                alert('Erreur lors du chargement des détails.');
            }
        });
    }
</script>

<!--==EQUIPES UPLOAD=======================================-->
<!-- Modal pour le téléchargement des utilisateurs -->
<div class="modal fade" id="uploadTemplateModal" tabindex="-1" aria-labelledby="uploadTemplateModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-black text-white">
                <h5 class="modal-title" id="uploadTemplateModalLabel">Ajouter Utilisateurs</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Contenu du formulaire de téléchargement sera chargé ici -->
                <div id="uploadTemplateContent"></div>
            </div>
        </div>
    </div>
</div>

<script>
    function loadUploadTemplateForm(equipeId) {
        var url = '@Url.Action("UploadTemplate", "Equipes")/' + equipeId;
        console.log(url); // Ajoutez cette ligne pour vérifier l'URL
        $.ajax({
            url: url,
            type: 'GET',
            success: function (data) {
                $('#uploadTemplateContent').html(data);
                $('#uploadTemplateModal').modal('show');
            },
            error: function () {
                alert('Erreur lors du chargement du formulaire de téléchargement.');
            }
        });
    }
</script>

=============================================================================================================


@model NotifApps.Models.Equipe

@{
    ViewData["Title"] = "Téléverser le Template";
}

<div class="container mt-5">
    <div class="card card">
        <div class="card-header bg-dark text-white">
            <h5 class="mb-0">Téléverser le Template d'Utilisateurs</h5>
        </div>
        <div class="card-body">
            <form asp-action="ProcessUpload" method="post" enctype="multipart/form-data">
                <input type="hidden" name="EquipeId" value="@ViewBag.EquipeId" />
                <div class="form group mb-3">
                    <label for="ExcelFile">Sélectionnez un fichier Excel</label>
                    <input type="file" name="ExcelFile" class="form-control" required />
                </div>
                <div class="d-flex justify-content-center mt-4">
                    <button type="submit" class="btn btn-danger m-3" title="Téléverser"><i class="fas fa-upload"></i></button>
                    <a asp-action="Index" class="btn btn-black m-3" title="Retour"><i class="fas fa-arrow-circle-left"></i></a>
                </div>
            </form>
        </div>
        <div class="card-footer">
            <h6>Autres méthodes</h6>
            <ul class="list-unstyled">
                <li><a href="#" class="text-decoration-none">Active Directory</a></li>
                <li><a href="#" class="text-decoration-none">API</a></li>
            </ul>
        </div>
    </div>
</div>


<style>
    .card {
        border-top-color: red;
        border-top-style: solid;
        border-top-width: 5px;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }
</style>
