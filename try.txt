voici ma vue EDIT applicatifs 
pourquoi quand je fais mes modifications et j'appuie sur savechanges 
je me rends compte que les addresses liées a l'applicatifs ont crées des doublons 

et normalement la modification d'addresses pour le type, on selectionne de la liste d'addresse 

@model NotifApps.Models.Applicatif

@{
    ViewData["Title"] = "Edit Applicatif";
}

    <div class="container mt-5">
        <div class="card card">
            <div class="card-header bg-black text-white text-center">
                <h2>Edit Applicatif</h2>
            </div>
            <div class="card-body">
                <form asp-action="Edit" method="post">
                    <input type="hidden" asp-for="AppId" />
                    <div class="form-group mb-3">
                        <label asp-for="AppNom" class="control-label"></label>
                        <input asp-for="AppNom" class="form-control" />
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="Descriptif" class="control-label"></label>
                        <input asp-for="Descriptif" class="form-control" />
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="LienWeb" class="control-label"></label>
                        <input asp-for="LienWeb" class="form-control" />
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="Statut" class="control-label"></label>
                        <input asp-for="Statut" class="form-control" />
                    </div>


                    <!-- Addresses section -->
                    <h3>Addresses</h3>
                    <div id="address-container">
                        @{
                            var addressesList = Model.Addresses.ToList();
                        }
                        @for (int i = 0; i < addressesList.Count; i++)
                        {
                            <div class="form-group mb-3">
                                <label>Type d'addresse</label>
                                <input type="text" name="addresses[@i].Type" class="form-control" value="@addressesList[i].Type" />
                                <label>Addresse</label>
                                <input type="text" name="addresses[@i].Value" class="form-control" value="@addressesList[i].Value" />
                            </div>
                        }
                    </div>
                    <button type="button" id="addAddressBtn" class="btn btn-black mb-3">Ajouter une addresse</button>

                    <div class="form-group text-center">
                        <input type="submit" value="Save Changes" class="btn btn-danger" />
                    </div>
                </form>
            </div>
        </div>

        <!-- Button to add users
    <div class="card mt-4">
        <div class="card-header bg-danger text-white">
            <h2>Rattacher les utilisateurs à cette Applicatif</h2>
        </div>
        <div class="card-body">
            <div class="card">

                <div class="form-group mb-3 d-flex justify-content-around">
                    <label>Par sélection</label>
                    <a asp-action="SelectUsers" asp-route-id="@Model.AppId" class="btn btn-black">Ajouter un utilisateur</a>
                </div>
            </div>
            <div class="card">
                <div class="form-group mb-3 d-flex justify-content-around">
                    <label>Par saisie manuelle</label>
                    <a asp-action="AddUserManually" asp-route-id="@Model.AppId" class="btn btn-black">Ajouter un utilisateur</a>
                </div>
            </div>
        </div>
        </div> -->
    </div>

@section Scripts {
    <script>
        let addressIndex = @Model.Addresses.Count;
        document.getElementById('addAddressBtn').addEventListener('click', function () {
            const container = document.getElementById('address-container');
            const newAddressHtml = `
                <div class="form-group mb-3">
                    <label>Type of Address</label>
                    <input type="text" name="addresses[${addressIndex}].Type" class="form-control" />
                    <label>Address Value</label>
                    <input type="text" name="addresses[${addressIndex}].Value" class="form-control" />
                </div>
            `;
            container.insertAdjacentHTML('beforeend', newAddressHtml);
            addressIndex++;
        });
    </script>
}

<style>
    .card {
        border-top-color: red;
        border-top-style: solid;
        border-top-width: 5px;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }
</style>

les methodes de mon controller 

   // GEET POST
        public IActionResult Create()
        {
            ViewBag.AddressTypes = _context.AddressTypes.ToList();
            return View();
        }

        // CREATE POST
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(Applicatif applicatif, List<Address> addresses)
        {
            if (ModelState.IsValid)
            {
                using (var transaction = await _context.Database.BeginTransactionAsync())
                {
                    try
                    {
                        _context.Add(applicatif);
                        await _context.SaveChangesAsync();

                        // Handle addresses
                        foreach (var address in addresses)
                        {
                            var existingAddress = await _context.Addresses
                                .FirstOrDefaultAsync(a => a.Type == address.Type && a.Value == address.Value && a.AppId == applicatif.AppId);

                            if (existingAddress == null)
                            {
                                address.AppId = applicatif.AppId; 
                                _context.Addresses.Add(address);
                            }
                        }
                        await _context.SaveChangesAsync();

                        // Commit the transaction
                        await transaction.CommitAsync();

                        return RedirectToAction(nameof(Index));
                    }
                    catch (Exception)
                    {
                        await transaction.RollbackAsync();
                        throw; 
                    }
                }
            }

            ViewBag.AddressTypes = _context.AddressTypes.ToList();
           return View(applicatif);
        }

        // GET: Applicatifs/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var applicatif = await _context.Applicatifs
                .Include(a => a.Addresses)
                .FirstOrDefaultAsync(m => m.AppId == id);
            if (applicatif == null)
            {
                return NotFound();
            }

           return View(applicatif);
        }

        // POST: Applicatifs/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, Applicatif applicatif, List<Address> addresses)
        {
            if (id != applicatif.AppId)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(applicatif);
                    await _context.SaveChangesAsync();

                    foreach (var address in addresses)
                    {
                        var existingAddress = await _context.Addresses
                            .FirstOrDefaultAsync(a => a.Type == address.Type && a.Value == address.Value && a.AppId == applicatif.AppId);

                        if (existingAddress == null)
                        {
                            address.AppId = applicatif.AppId;
                            _context.Addresses.Add(address);
                        }
                    }
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ApplicatifExists(applicatif.AppId))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(applicatif);
        }

        private bool ApplicatifExists(int id)
        {
            return _context.Applicatifs.Any(e => e.AppId == id);
        }
