Ajoutez une fonction de filtre sur ce graphique pour pouvoir filtrer les périodes par date

 
 <!-- Monthly Chart -->
            <div class="col-md-6 ms-2 ">
                <div class="card">
                    <div class="chart-container">
                        <canvas id="monthlyChart"></canvas>
                    </div>
                </div>
            </div>
        </div> 


// Monthly Chart
    fetch('/Homes/GetMonthlyIncidentData')
        .then(response => response.json())
        .then(data => {
            const monthNames = [
                'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin',
                'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'
            ];

            const labels = data.map(item => monthNames[item.month - 1]);
            const counts = data.map(item => item.count);

            const ctx = document.getElementById('monthlyChart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Evolution des incidents par mois',
                        data: counts,
                        borderColor: 'blue',
                        backgroundColor: 'rgba(0, 0, 255, 0.2)',
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: true },
                        tooltip: { enabled: true }
                    },
                    scales: {
                        x: {
                            title: { display: true, text: 'Mois' }
                        },
                        y: {
                            title: { display: true, text: 'Nombre d\'Incidents' },
                            beginAtZero: true
                        }
                    }
                }
            });
        })
        .catch(error => console.error('Erreur lors de la récupération des données :', error));

voici la methode du graphique dans le controller 

[HttpGet]
        public IActionResult GetMonthlyIncidentData()
        {
            // Récupérer les données groupées par mois
            var incidentData = _context.Incidents
                .GroupBy(i => i.Debutdimpact.Value.Month)
                .Select(g => new { Month = g.Key, Count = g.Count() })
                .ToList();

            // Ajouter les mois manquants
            var allMonths = Enumerable.Range(1, 12)
                .Select(m => new
                {
                    Month = m,
                    Count = incidentData.FirstOrDefault(i => i.Month == m)?.Count ?? 0
                })
                .ToList();

            return Json(allMonths);
        }

voici mon model au cas ou vous en avez besoin 

using System;
using System.Collections.Generic;

#nullable disable

namespace NotifApps.Models
{

    public partial class Incident
    {
        public Incident()
        {
            ApplicationIncidents = new HashSet<ApplicationIncident>();
            PlanDactions = new List<PlanDaction>();
    }

        public int IncidentId { get; set; }
        public string Description { get; set; }
        public string DestinataireSup { get; set; }
        public int? OrigineId { get; set; }
        public int? CriticiteId { get; set; }
        public int? StatutId { get; set; }
        public int? AppId { get; set; }
        public string Titre { get; set; }
        public string Pec { get; set; }
        public string RefTicket { get; set; }
        public string LienTicket { get; set; }
        public DateTime? Debutdimpact { get; set; }
        public DateTime? Datepriseencharge { get; set; }
        public DateTime? Dateresolution { get; set; }
        public string Impact { get; set; }
        public int? PecId { get; set; }
        public int? EquipeId { get; set; }
        public virtual Equipe Equipe { get; set; }
        public virtual Applicatif App { get; set; }
        public virtual Criticite Criticite { get; set; }
        public virtual Origine Origine { get; set; }
        public virtual Statut Statut { get; set; }
        public byte[] PostMortem { get; set; } // Nouvelle propriété ajoutée PM
        public virtual ICollection<ApplicationIncident> ApplicationIncidents { get; set; }
        public virtual ICollection<PlanDaction> PlanDactions { get; set; }

    }

}


