<div class="container mt-5">
    <div class="card card">
        <div class="card-header bg-black text-white">
            <h4>Créer une Équipe</h4>
        </div>
        <div class="card-body">
            <form asp-action="Create" method="post">
                <div class="form-group">
                    <label asp-for="NomEquipe" class="control-label"></label>
                    <input asp-for="NomEquipe" class="form-control" placeholder="Entrez un nom" />
                    <span asp-validation-for="NomEquipe" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Descriptions" class="form-label">Description</label>
                    <textarea asp-for="Descriptions" class="form-control" placeholder="Ajoutez une description si nécessaire"></textarea>
                    <span asp-validation-for="Descriptions" class="text-danger"></span>
                </div>

                <div class="form-group mt-3">
                    <label>Souhaitez-vous rattacher des utilisateurs à cette équipe ?</label>
                    <div>
                        <button type="button" class="btn btn-primary" onclick="showUserForm()">Oui</button>
                        <button type="button" class="btn btn-secondary" onclick="hideUserForm()">Non</button>
                    </div>
                </div>

                <div id="userForm" style="display:none;">
                    <h5>Rattacher Utilisateur(s)</h5>
                    <input type="text" id="searchInput" class="form-control" placeholder="Rechercher un utilisateur" onkeyup="filterUsers()" />

                    <div id="userList" class="mb-4" style="display:none;">
                        @if (ViewBag.Utilisateurs != null)
                        { 
                            @foreach (var utilisateur in ViewBag.Utilisateurs)
                            {
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input"
                                           name="selectedUsers"
                                           value="@utilisateur.UtilisateursID"
                                           id="user_@utilisateur.UtilisateursID" />
                                    <label class="form-check-label" for="user_@utilisateur.UtilisateursID">
                                        @utilisateur.NomUtilisateurs @utilisateur.PrenomUtilisateurs @utilisateur.AG
                                    </label>
                                </div>
                            }
                           }
                    </div>
                </div>

                <div class="d-flex justify-content-center mt-4">
                    <button type="submit" class="btn btn-danger ms-3" title="Créer"><i class="fas fa-save"></i></button>
                    <a asp-action="Index" class="btn btn-black ms-3" title="Annuler"><i class="fas fa-ban"></i></a>
                </div>
            </form>
        </div>
    </div>
</div>

mettez ca dans un modal, je veux pouvoir creer une equipe et je veux que lorsque j'appui sur ce bouton 

<p>
    <button class="btn btn-black" data-bs-toggle="modal" data-bs-target="#createModal">
        Ajouter equipe
    </button>
</p>

en creant l'equipe je peur aussi rattacher l'utilisateur directement 
<script>
    function showUserForm() {
        document.getElementById('userForm').style.display = 'block';
        document.getElementById('userList').style.display = 'none'; // hide ysers initially
    }

    function hideUserForm() {
        document.getElementById('userForm').style.display = 'none';
    }

    function filterUsers() {
        var input, filter, userList, checkboxes, label, i, txtValue;
        input = document.getElementById('searchInput');
        filter = input.value.toLowerCase();
        userList = document.getElementById("userList");
        checkboxes = userList.getElementsByClassName('form-check');

        // Show the user list if there's input
        if (filter.length > 0) {
            userList.style.display = 'block';
        } else {
            userList.style.display = 'none'; // Hide if no input
        }

        for (i = 0; i < checkboxes.length; i++) {
            label = checkboxes[i].getElementsByTagName("label")[0];
            if (label) {
                txtValue = label.textContent || label.innerText;
                checkboxes[i].style.display = txtValue.toLowerCase().indexOf(filter) > -1 ? "" : "none";
            }
        }
    }
</script>

le but c'est de ne plus avoir une page create, mais depuis la vue Index je clique sur ajouter equipe et le formulaire de creation sort dans un modal

voici les methodes de creation 

 // GET: Equipes/Create
        public IActionResult Create()
        {
            var breadcrumb = GetBreadcrumb("Create");
            ViewBag.Breadcrumb = breadcrumb;
            ViewBag.Utilisateurs = _context.Utilisateurs
                .Where(u=>u.Statut == "Actif")
                .ToList(); // Récupérer tous les utilisateurs
            return View();
        }

        // POST: Equipes/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("NomEquipe,Descriptions")] Equipe equipe, int[] selectedUsers, bool forceCreate = false)
        {
            if (ModelState.IsValid)
            {
                equipe.Statut = "Actif";

                // Vérification de l'existence d'une criticité avec le même nom
                var existingEquipe = await _context.Equipes
                    .FirstOrDefaultAsync(c => c.NomEquipe == equipe.NomEquipe);

                if (existingEquipe != null && !forceCreate)
                {
                    // Criticité existe déjà, demander confirmation
                    TempData["ExistingEquipe"] = true;
                    TempData["NomEquipe"] = equipe.NomEquipe;
                    TempData["Descriptions"] = equipe.Descriptions;
                    return RedirectToAction("Index");
                }

                // Check if Descriptions is null or empty, and set it to "RAS" if so
                if (string.IsNullOrEmpty(equipe.Descriptions))
                {
                    equipe.Descriptions = "RAS";
                }

                _context.Add(equipe);
                await _context.SaveChangesAsync();

                // Rattacher les utilisateurs sélectionnés
                if (selectedUsers != null)
                {
                    foreach (var userId in selectedUsers)
                    {
                        var equipeUtilisateur = new EquipeUtilisateur
                        {
                            EquipeId = equipe.EquipeId,
                            UtilisateursId = userId
                        };
                        _context.Add(equipeUtilisateur);
                    }
                    await _context.SaveChangesAsync();
                }

                return RedirectToAction(nameof(Index));
            }

            ViewBag.Utilisateurs = _context.Utilisateurs.ToList(); // Récupérer à nouveau les utilisateurs en cas d'erreur
            return View(equipe);
        }

        // GET: Equipes/CheckEquipeExists
        public async Task<IActionResult> CheckEquipeExists(string nomEquipe)
        {
            var existingEquipe = await _context.Equipes
                .FirstOrDefaultAsync(c => c.NomEquipe == nomEquipe);
            return Json(existingEquipe != null);
        }

