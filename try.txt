using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;

namespace NotifApps.Models
{
    public class Utilisateurs
    {
        public int UtilisateursID { get; set; }
        public string NomUtilisateurs { get; set; }
        public string PrenomUtilisateurs { get; set; }
        public string Email { get; set; }
        public string AG { get; set; }
        [Display(Name = "Date d'activation")]
        public DateTime? DateCreation { get; set; } = DateTime.Now;
        [Display(Name = "Date de désactivation")]
        public DateTime? DateDesactivation { get; set; }
        [Display(Name = "Statut")]
        public string Statut { get; set; } = "Actif";


        // Navigation property
        public virtual ICollection<EquipeUtilisateur> EquipeUtilisateur { get; set; }
    }

} 

// GET: Equipes/Edit/5
        public async Task<IActionResult> Edit(int id)
        {
            var equipe = await _context.Equipes
                .Include(e => e.EquipeUtilisateurs)
                .ThenInclude(eu => eu.Utilisateurs)
                .FirstOrDefaultAsync(e => e.EquipeId == id);

            if (equipe == null)
            {
                return NotFound();
            }

            // Get all users
            var utilisateurs = await _context.Utilisateurs.ToListAsync();

            // Get the IDs of users already associated with the team
            var existingUserIds = equipe.EquipeUtilisateurs.Select(eu => eu.UtilisateursId).ToList();

            ViewBag.Utilisateurs = utilisateurs;
            ViewBag.ExistingUserIds = existingUserIds;

            return View(equipe);
        }



        //POST : EDit
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> SaveEdit(int equipeId, int[] selectedUsers)
        {
            // Remove existing associations
            var existingAssociations = await _context.EquipeUtilisateurs
                .Where(eu => eu.EquipeId == equipeId)
                .ToListAsync();

            _context.EquipeUtilisateurs.RemoveRange(existingAssociations);

            // Add new associations
            if (selectedUsers != null)
            {
                foreach (var userId in selectedUsers)
                {
                    var equipeUtilisateur = new EquipeUtilisateur
                    {
                        EquipeId = equipeId,
                        UtilisateursId = userId
                    };

                    _context.Add(equipeUtilisateur);
                }
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Details), new { id = equipeId });
        }
ma vue Edit 
@model NotifApps.Models.Equipe

@{
    ViewData["Title"] = "Modifier Équipe";
}

<div class="container mt-5">
    <h2 class="text-center mb-4">Modifier Équipe</h2>

    <div class="card card">
        <div class="card-header bg-black text-white">
            <h4>Utilisateurs Associés à @Model.NomEquipe</h4>
        </div>
        <div class="card-body">
            <form asp-action="SaveEdit" method="post">
                <input type="hidden" name="EquipeId" value="@Model.EquipeId" />

                <div id="userList" class="mb-4">
                    @foreach (var utilisateur in ViewBag.Utilisateurs)
                    {
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input"
                                   name="selectedUsers"
                                   value="@utilisateur.UtilisateursID"
                                   id="user_@utilisateur.UtilisateursID"
                                   @(ViewBag.ExistingUserIds.Contains(utilisateur.UtilisateursID) ? "checked" : "") />
                            <label class="form-check-label" for="user_@utilisateur.UtilisateursID">
                                @utilisateur.NomUtilisateurs @utilisateur.PrenomUtilisateurs
                            </label>
                        </div>
                    }
                </div>

                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn btn-danger mx-2" title="Enregistrer les modifications">
                        <i class="fas fa-save"></i>
                    </button>
                    <a asp-action="Index" class="btn btn-black mx-2" title="Retour à la liste">
                        <i class="fa fa-arrow-circle-left"></i>
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Include Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">


<style>
    .card {
        border-top-color: red;
        border-top-style: solid;
        border-top-width: 5px;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }
</style>