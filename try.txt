<div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-black text-white">
                <h5 class="modal-title" id="createLabel">Créer une Equipe</h5>
                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <form asp-action="Create" method="post" id="createForm">
                    <div class="form-group">
                        <label for="NomEquipe"></label>
                        <input id="NomEquipe" name="NomEquipe" class="form-control" placeholder="Entrez un nom" />
                        <span id="NomEquipeError" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label for="Descriptions" class="form-label">Description</label>
                        <textarea id="Descriptions" name="Descriptions" class="form-control" placeholder="Ajoutez une description si nécessaire"></textarea>
                        <span class="text-danger" id="descriptionError"></span>
                    </div>

                    <div class="form-group mt-3">
                        <label>Souhaitez-vous rattacher des utilisateurs à cette équipe ?</label>
                        <div>
                            <button type="button" class="btn btn-primary" onclick="showUserForm()">Oui</button>
                            <button type="button" class="btn btn-secondary" onclick="hideUserForm()">Non</button>
                        </div>
                    </div>

                    <div id="userForm" style="display:none;">
                        <h5>Rattacher Utilisateur(s)</h5>
                        <input type="text" id="searchInput" class="form-control" placeholder="Rechercher un utilisateur" onkeyup="filterUsers()" />

                        <div id="userList" class="mb-4" style="display:none;">
                            @if (ViewBag.Utilisateurs != null)
                            {
                                @foreach (var utilisateur in ViewBag.Utilisateurs)
                                {
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input"
                                               name="selectedUsers"
                                               value="@utilisateur.UtilisateursID"
                                               id="user_@utilisateur.UtilisateursID" />
                                        <label class="form-check-label" for="user_@utilisateur.UtilisateursID">
                                            @utilisateur.NomUtilisateurs @utilisateur.PrenomUtilisateurs @utilisateur.AG
                                        </label>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    <input type="hidden" id="forceCreate" name="forceCreate" value="false" />
                    <div class="modal-footer justify-content-center">
                        <div class="text-center mt-4">
                            <button type="submit" class="btn btn-danger ms-3" title="Créer" onclick="submitForm()">Enregistrer</button>
                            <button type="button" class="btn btn-black ms-3" data-bs-dismiss="modal">
                                <i class="fas fa-ban"></i> Annuler
                            </button>

                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

ce formulaire est dans un modal, j'aimerais que lorsqu'on le valide pour creer une equipe, si une equipe existe deja a ce nom 
un message comme celui ci sort pour confirmer la creation ou pas 
<script>
    async function submitForm() {
        const nomEquipe = document.getElementById('NomEquipe').value;
        const response = await fetch(`/Equipe/CheckEquipeExists?nomEquipe=${nomEquipe}`);
        const exists = await response.json();

        if (exists) {
            if (confirm("L'équipe avec le nom existe déjà. Voulez-vous continuer ?")) {
                document.getElementById('forceCreate').value = "true";
                document.getElementById('createForm').submit();
            } else {
                var myModal = new bootstrap.Modal(document.getElementById('createModal'));
                myModal.show();
            }
        } else {
            document.getElementById('createForm').submit();
        }
    }
</script>

voici les fonctions pour vous aider, 

 // GET: Equipes/Create
        public IActionResult Create()
        {
            var breadcrumb = GetBreadcrumb("Create");
            ViewBag.Breadcrumb = breadcrumb;
            ViewBag.Utilisateurs = _context.Utilisateurs
                .Where(u=>u.Statut == "Actif")
                .ToList(); // Récupérer tous les utilisateurs
            return View();
        }

        // POST: Equipes/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("NomEquipe,Descriptions")] Equipe equipe, int[] selectedUsers, bool forceCreate = false)
        {
            if (ModelState.IsValid)
            {
                equipe.Statut = "Actif";

                // Vérification de l'existence d'une criticité avec le même nom
                var existingEquipe = await _context.Equipes
                    .FirstOrDefaultAsync(c => c.NomEquipe == equipe.NomEquipe);

                if (existingEquipe != null && !forceCreate)
                {
                    // Criticité existe déjà, demander confirmation
                    TempData["ExistingEquipe"] = true;
                    TempData["NomEquipe"] = equipe.NomEquipe;
                    TempData["Descriptions"] = equipe.Descriptions;
                    return RedirectToAction("Index");
                }

                // Check if Descriptions is null or empty, and set it to "RAS" if so
                if (string.IsNullOrEmpty(equipe.Descriptions))
                {
                    equipe.Descriptions = "RAS";
                }

                _context.Add(equipe);
                await _context.SaveChangesAsync();

                // Rattacher les utilisateurs sélectionnés
                if (selectedUsers != null)
                {
                    foreach (var userId in selectedUsers)
                    {
                        var equipeUtilisateur = new EquipeUtilisateur
                        {
                            EquipeId = equipe.EquipeId,
                            UtilisateursId = userId
                        };
                        _context.Add(equipeUtilisateur);
                    }
                    await _context.SaveChangesAsync();
                }

                return RedirectToAction(nameof(Index));
            }

            ViewBag.Utilisateurs = _context.Utilisateurs.ToList(); // Récupérer à nouveau les utilisateurs en cas d'erreur
            return View(equipe);
        }

        // GET: Equipes/CheckEquipeExists
        public async Task<IActionResult> CheckEquipeExists(string nomEquipe)
        {
            var existingEquipe = await _context.Equipes
                .FirstOrDefaultAsync(c => c.NomEquipe == nomEquipe);
            return Json(existingEquipe != null);
        }
