// GET: Applicatif/EditCriticite
[HttpGet]
public async Task<IActionResult> EditCriticite(int applicatifId, int equipeId)
{
    // Recherche de l'association entre l'applicatif et l'équipe
    var equipeApplicatif = await _context.EquipeApplicatifs
        .FirstOrDefaultAsync(ea => ea.AppId == applicatifId && ea.EquipeId == equipeId);

    if (equipeApplicatif == null)
    {
        // Retourne une erreur 404 si l'association n'est pas trouvée
        return NotFound();
    }

    // Options de criticité pour le sélecteur dans la vue
    ViewBag.CriticiteOptions = new List<string> { "P0", "P1", "P2", "P3" };
    return View(equipeApplicatif);
}
// POST: Applicatif/EditCriticite
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> EditCriticite(int applicatifId, int equipeId, string criticiteNom)
{
    // Recherche de l'association entre l'applicatif et l'équipe
    var equipeApplicatif = await _context.EquipeApplicatifs
        .FirstOrDefaultAsync(ea => ea.AppId == applicatifId && ea.EquipeId == equipeId);

    if (equipeApplicatif == null)
    {
        // Retourne une erreur 404 si l'association n'est pas trouvée
        return NotFound();
    }

    // Mise à jour du champ CriticiteNom
    equipeApplicatif.CriticiteNom = criticiteNom;

    // Validation et enregistrement des modifications
    if (ModelState.IsValid)
    {
        try
        {
            _context.Update(equipeApplicatif);
            await _context.SaveChangesAsync();

            // Redirection vers la page de détails de l'applicatif après enregistrement
            return RedirectToAction("Details", new { id = applicatifId });
        }
        catch (DbUpdateConcurrencyException)
        {
            // Vérifie l'existence avant de retourner une erreur
            if (!EquipeApplicatifExists(applicatifId, equipeId))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }
    }

    // Recharge les options de criticité si le ModelState n'est pas valide
    ViewBag.CriticiteOptions = new List<string> { "P0", "P1", "P2", "P3" };
    return View(equipeApplicatif);
}

// Méthode pour vérifier l'existence de l'association équipe-applicatif
private bool EquipeApplicatifExists(int applicatifId, int equipeId)
{
    return _context.EquipeApplicatifs.Any(e => e.AppId == applicatifId && e.EquipeId == equipeId);
}

