@{
    ViewData["Title"] = "Dashboard";
}

<h1 class="text-center my-4">Insights</h1>
<hr />
<div class="container">
    <div class="">
        <!-- Cards Section -->
        <div class="d-flex justify-content-between flex-wrap">
            <!-- Total Incidents -->
            <div class="card text-black bg-primary mb-3" style="width: 18rem;">
                <div class="card-header">Nombre d'incidents sans post mortem</div>
                <div class="card-body">
                    <h1 class="card-title text-center"> </h1>
                    <!--<h1 class="card-title text-center">@ViewBag.TotalIncidents</h1>-->

                    <i class="fas fa-th-list"></i>
                </div>
            </div>

            <!-- Incidents En Cours -->
            <div class="card text-black bg-warning mb-3" style="width: 18rem;">
                <div class="card-header">Incidents En Cours</div>
                <div class="card-body ">
                    <div class="d-flex justify-content-center align-items-center">
                        <h1 class="card-title text-black mb-0">@ViewBag.EnCoursCount</h1>
                        <span class="mx-2">sur</span>
                        <h1 class="card-title text-black mb-0">@ViewBag.TotalIncidents</h1>
                    </div>
                    <i class="fas fa-spinner mt-3"></i>
                </div>
            </div>

            <!-- Criticité P0, haute criticité -->
            <div class="card text-black bg-danger mb-3" style="width: 18rem;">
                <div class="card-header">Incident de criticité P0</div>
                <div class="card-body">
                    <h1 class="card-title text-center">@ViewBag.CriticiteP0Count</h1>
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
            </div>

            <div class="card text-black bg-info mb-3" style="width: 18rem;">
                <div class="card-header">Incident de criticité P1</div>
                <div class="card-body">
                    <h1 class="card-title text-center">@ViewBag.CriticiteP1Count</h1>
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
            </div>

            <!-- Incidents Clos -->
            <div class="card text-black bg-light-subtle mb-3" style="width: 18rem;">
                <div class="card-header">Incident de criticité P2</div>
                <div class="card-body">
                    <h1 class="card-title text-center">@ViewBag.CriticiteP2Count</h1>
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
            </div>
        </div>
    </div>
    <!-- Graphics Section -->
    <div class="mt-5">
        <h2 class="text-center">Dashboards</h2>
        <hr />
        <div class="d-flex justify-content-center ">
            <!-- Chart 2 -->
            <div class="col-md-6 ms-2 ">
                <div class="card">
                    <div class="chart-container">
                        <canvas id="chart2"></canvas>
                    </div>
                </div>
            </div>

            <!-- Monthly Chart -->
            <div class="col-md-6 ms-2 ">
                <div class="card">
                    <div class="chart-container">
                        <canvas id="monthlyChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/js/Chart.js"></script>
<script>
    // Graph 2
    const ctx2 = document.getElementById('chart2').getContext('2d');
    new Chart(ctx2, {
        type: 'pie',
        data: {
            labels: ['En Cours', 'Résolu', 'Clos'],
            datasets: [{
                data: [@ViewBag.EnCoursCount, @ViewBag.IncidentsResoluCount, @ViewBag.IncidentsClosCount],
                backgroundColor: ['orange', 'green', 'SlateBlue']
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { display: true },
                tooltip: { enabled: true }
            }
        }
    });

    // Monthly Chart
    fetch('/Homes/GetMonthlyIncidentData')
        .then(response => response.json())
        .then(data => {
            const monthNames = [
                'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin',
                'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'
            ];

            const labels = data.map(item => monthNames[item.month - 1]);
            const counts = data.map(item => item.count);

            const ctx = document.getElementById('monthlyChart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Evolution des incidents par mois',
                        data: counts,
                        borderColor: 'blue',
                        backgroundColor: 'rgba(0, 0, 255, 0.2)',
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: true },
                        tooltip: { enabled: true }
                    },
                    scales: {
                        x: {
                            title: { display: true, text: 'Mois' }
                        },
                        y: {
                            title: { display: true, text: 'Nombre d\'Incidents' },
                            beginAtZero: true
                        }
                    }
                }
            });
        })
        .catch(error => console.error('Erreur lors de la récupération des données :', error));
</script>

<style>
    .chart-container {
        width: 500px;
        height: 400px;
    }

    #chart2 {
        width: 100% !important;
        height: 100% !important;
    }

    #monthlyChart {
        width: 130% !important;
        height: 100% !important;
    }
</style>

<!-- DataTable Section -->
<div class="mt-5">
    <h2 class="text-center">Tableau de Bord des Incidents</h2>
    <hr />
    <div class="d-flex justify-content-center">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-3">
                        <div>
                            <label for="startDate">Date de début:</label>
                            <input type="date" id="startDate" class="form-control">
                        </div>
                        <div>
                            <label for="endDate">Date de fin:</label>
                            <input type="date" id="endDate" class="form-control">
                        </div>
                        <div class="align-self-end">
                            <button id="filterButton" class="btn btn-primary">Filtrer</button>
                        </div>
                    </div>
                    <table id="incidentTable" class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Total Incidents</th>
                                <th>Incidents Clos</th>
                                <th>Incidents Résolu</th>
                                <th>Criticité P0 sans PM</th>
                                <th>Criticité P1 sans PM</th>
                                <th>Criticité P2 sans PM</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td id="totalIncidents"></td>
                                <td id="incidentsClos"></td>
                                <td id="incidentsResolu"></td>
                                <td id="criticiteP0SansPM"></td>
                                <td id="criticiteP1SansPM"></td>
                                <td id="criticiteP2SansPM"></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.10.21/js/dataTables.bootstrap4.min.js"></script>
<script>
    $(document).ready(function () {
        $('#incidentTable').DataTable();

        $('#filterButton').click(function () {
            var startDate = $('#startDate').val();
            var endDate = $('#endDate').val();

            $.ajax({
                url: '/Homes/GetIncidentSummary',
                data: { startDate: startDate, endDate: endDate },
                success: function (data) {
                    console.log(data); // Vérifiez les données reçues

                    $('#totalIncidents').text(data.TotalIncidents);
                    $('#incidentsClos').text(data.IncidentsClos);
                    $('#incidentsResolu').text(data.IncidentsResolu);
                    $('#criticiteP0SansPM').text(data.CriticiteP0SansPM);
                    $('#criticiteP1SansPM').text(data.CriticiteP1SansPM);
                    $('#criticiteP2SansPM').text(data.CriticiteP2SansPM);
                },
                error: function (xhr, status, error) {
                    console.error('Erreur lors de la récupération des données :', error);
                }
            });
        });
    });
</script>  
























using Microsoft.AspNetCore.Mvc;
using NotifApps.Models;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;

namespace NotifApps.Controllers
{
    public class HomesController : Controller
    {
        private readonly NotifdbContext _context;

        public HomesController(NotifdbContext context)
        {
            _context = context;
        }
        //BREADCRUMB................................
        public List<BreadcrumbItem> GetBreadcrumb(string page)
        {
            var breadcrumb = new List<BreadcrumbItem>
       {
           new BreadcrumbItem { Title = "Homes", Url = Url.Action("Index", "Homes"), IsActive = false }
       };

            switch (page)
            {
                case "Index":
                    breadcrumb.Add(new BreadcrumbItem { Title = "Index", Url = Url.Action("Index", "Utilisateur"), IsActive = true });
                    break;
                case "Create":
                    breadcrumb.Add(new BreadcrumbItem { Title = "Index", Url = Url.Action("Index", "Utilisateur"), IsActive = false });
                    breadcrumb.Add(new BreadcrumbItem { Title = "Create", Url = Url.Action("Create", "Utilisateur"), IsActive = true });
                    break;
                case "Details":
                    breadcrumb.Add(new BreadcrumbItem { Title = "Index", Url = Url.Action("Index", "Utilisateur"), IsActive = false });
                    breadcrumb.Add(new BreadcrumbItem { Title = "Details", Url = Url.Action("Details", "Utilisateurt"), IsActive = true });
                    break;
                case "Edit":
                    breadcrumb.Add(new BreadcrumbItem { Title = "Index", Url = Url.Action("Index", "Utilisateur"), IsActive = false });
                    breadcrumb.Add(new BreadcrumbItem { Title = "Edit", Url = Url.Action("Edit", "Utilisateur"), IsActive = true });
                    break;
                case "AttacheEquipe":
                    breadcrumb.Add(new BreadcrumbItem { Title = "Index", Url = Url.Action("Index", "Utilisateur"), IsActive = false });
                    breadcrumb.Add(new BreadcrumbItem { Title = "AttacheEquipe", Url = Url.Action("AttacheEquipe", "Utilisateur"), IsActive = true });
                    break;
                case "UploadUsers":
                    breadcrumb.Add(new BreadcrumbItem { Title = "Index", Url = Url.Action("Index", "Utilisateur"), IsActive = false });
                    breadcrumb.Add(new BreadcrumbItem { Title = "UploadUsers", Url = Url.Action("UploadUsers", "Utilisateur"), IsActive = true });
                    break;

            }

            return breadcrumb;
        }
        public IActionResult Index()
        {
            var breadcrumb = GetBreadcrumb("Index");
            ViewBag.Breadcrumb = breadcrumb;
            var totalIncidents = _context.Incidents.Count();
            var enCoursCount = _context.Incidents.Count(i => i.Statut.StatutNom == "En cours");
            var criticiteP0Count = _context.Incidents.Count(i => i.Criticite.CriticiteNom == "P0");
            var criticiteP1Count = _context.Incidents.Count(i => i.Criticite.CriticiteNom == "P1");
            var criticiteP2Count = _context.Incidents.Count(i => i.Criticite.CriticiteNom == "P2");
            var incidentClosCount = _context.Incidents.Count(i => i.Statut.StatutNom == "Clos");
            var incidentsResoluCount = _context.Incidents.Count(i => i.Statut.StatutNom == "Résolu");


            ViewBag.TotalIncidents = totalIncidents;
            ViewBag.EnCoursCount = enCoursCount;
            ViewBag.CriticiteP0Count = criticiteP0Count;
            ViewBag.CriticiteP1Count = criticiteP1Count;
            ViewBag.CriticiteP2Count = criticiteP2Count;
            ViewBag.IncidentsClosCount = incidentClosCount;
            ViewBag.IncidentsResoluCount = incidentsResoluCount;


            return View();
        }

        [HttpGet]
        public IActionResult GetMonthlyIncidentData()
        {
            // Récupérer les données groupées par mois
            var incidentData = _context.Incidents
                .GroupBy(i => i.Debutdimpact.Value.Month)
                .Select(g => new { Month = g.Key, Count = g.Count() })
                .ToList();

            // Ajouter les mois manquants
            var allMonths = Enumerable.Range(1, 12)
                .Select(m => new
                {
                    Month = m,
                    Count = incidentData.FirstOrDefault(i => i.Month == m)?.Count ?? 0
                })
                .ToList();

            return Json(allMonths);
        }


        [HttpGet]
        public IActionResult GetIncidentSummary(DateTime? startDate, DateTime? endDate)
        {
            var query = _context.Incidents.AsQueryable();

            if (startDate.HasValue)
            {
                query = query.Where(i => i.Debutdimpact >= startDate.Value);
            }

            if (endDate.HasValue)
            {
                query = query.Where(i => i.Debutdimpact <= endDate.Value);
            }

            var totalIncidents = query.Count();
            var incidentsClos = query.Count(i => i.Statut.StatutNom == "Clos");
            var incidentsResolu = query.Count(i => i.Statut.StatutNom == "Résolu");
            var criticiteP0SansPM = query.Count(i => i.Criticite.CriticiteNom == "P0" && i.PostMortem == null);
            var criticiteP1SansPM = query.Count(i => i.Criticite.CriticiteNom == "P1" && i.PostMortem == null);
            var criticiteP2SansPM = query.Count(i => i.Criticite.CriticiteNom == "P2" && i.PostMortem == null);

            var result = new
            {
                TotalIncidents = totalIncidents,
                IncidentsClos = incidentsClos,
                IncidentsResolu = incidentsResolu,
                CriticiteP0SansPM = criticiteP0SansPM,
                CriticiteP1SansPM = criticiteP1SansPM,
                CriticiteP2SansPM = criticiteP2SansPM
            };

            return Json(result);
        }
    }
}














using System;
using System.Collections.Generic;

#nullable disable

namespace NotifApps.Models
{

    public partial class Incident
    {
        public Incident()
        {
            ApplicationIncidents = new HashSet<ApplicationIncident>();
            PlanDactions = new List<PlanDaction>();
    }

        public int IncidentId { get; set; }
        public string Description { get; set; }
        public string DestinataireSup { get; set; }
        public int? OrigineId { get; set; }
        public int? CriticiteId { get; set; }
        public int? StatutId { get; set; }
        public int? AppId { get; set; }
        public string Titre { get; set; }
        public string Pec { get; set; }
        public string RefTicket { get; set; }
        public string LienTicket { get; set; }
        public DateTime? Debutdimpact { get; set; }
        public DateTime? Datepriseencharge { get; set; }
        public DateTime? Dateresolution { get; set; }
        public string Impact { get; set; }
        public int? PecId { get; set; }
        public int? EquipeId { get; set; }
        public virtual Equipe Equipe { get; set; }
        public virtual Applicatif App { get; set; }
        public virtual Criticite Criticite { get; set; }
        public virtual Origine Origine { get; set; }
        public virtual Statut Statut { get; set; }
        public byte[] PostMortem { get; set; } // Nouvelle propriété ajoutée PM
        public virtual ICollection<ApplicationIncident> ApplicationIncidents { get; set; }
        public virtual ICollection<PlanDaction> PlanDactions { get; set; }

    }

}


