voici ma vue pour modifier la criticite 
@model NotifApps.Models.EquipeApplicatif

@{
    ViewData["Title"] = "Modifier la Criticité";
}

<h2>Modifier la Criticité</h2>

<form asp-action="EditCriticite" method="post">
    <input type="hidden" asp-for="AppId" />
    <input type="hidden" asp-for="EquipeId" />

    <div class="form-group">
        <label for="criticiteNom">Criticité</label>
        <select asp-for="CriticiteNom" asp-items="@(new SelectList(ViewBag.CriticiteOptions))" class="form-control"></select>
    </div>

    <button type="submit" class="btn btn-primary">Enregistrer</button>
</form>

voici les methodes du controller pour assigner une criticite et pour modifier 
je reussis bien a assigner une criticite a une equipe 
mais quand je veux modifier je fais la modification et quand j'appuie sur Enregustrer mais ca me renvoi une errer
aidez moi a corriger cela 
  // RATTACHER EQUIPE A APPLICATIF
        public IActionResult AttacheEquipe(int id)
        {
            var applicatif = _context.Applicatifs.Find(id);
            var equipes = _context.Equipes.ToList(); // Get all teams
            ViewBag.ApplicatifId = id;

            // Define criticality options
            ViewBag.CriticiteOptions = new List<string> { "P0", "P1", "P2", "P3" };

            return View(equipes);
        }

        //POST ATTACH
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> SaveEquipe(int applicatifId, int equipeId, string criticiteNom)
        {
            var applicatif = await _context.Applicatifs.FindAsync(applicatifId);
            var equipe = await _context.Equipes.FindAsync(equipeId);

            if (applicatif != null && equipe != null)// check si equipe est null ou pas 
            {
                var equipeApplicatif = new EquipeApplicatif
                {
                    AppId = applicatifId,
                    EquipeId = equipeId,
                    CriticiteNom = criticiteNom 
                };

                _context.Add(equipeApplicatif);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Details), new { id = applicatifId });
            }

            return NotFound();
        }

        // GET: Applicatifs/EditCriticite
        public async Task<IActionResult> EditCriticite(int? applicatifId, int? equipeId)
        {
            if (applicatifId == null || equipeId == null)
            {
                return NotFound();
            }

            var equipeApplicatif = await _context.EquipeApplicatifs
                .FirstOrDefaultAsync(ea => ea.AppId == applicatifId && ea.EquipeId == equipeId);

            if (equipeApplicatif == null)
            {
                return NotFound();
            }

            ViewBag.CriticiteOptions = new List<string> { "P0", "P1", "P2", "P3" };
            return View(equipeApplicatif);
        }



        // POST: Applicatifs/EditCriticite
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> EditCriticite(int applicatifId, int equipeId, string criticiteNom)
        {
            var equipeApplicatif = await _context.EquipeApplicatifs
                .FirstOrDefaultAsync(ea => ea.AppId == applicatifId && ea.EquipeId == equipeId);

            if (equipeApplicatif == null)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    equipeApplicatif.CriticiteNom = criticiteNom;
                    _context.Update(equipeApplicatif);
                    await _context.SaveChangesAsync();
                    return RedirectToAction(nameof(Details), new { id = applicatifId });
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!EquipeApplicatifExists(applicatifId, equipeId))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
            }

            ViewBag.CriticiteOptions = new List<string> { "P0", "P1", "P2", "P3" };
            return View(equipeApplicatif);
        }


        // Méthode pour vérifier l'existence de l'équipe applicatif
        private bool EquipeApplicatifExists(int applicatifId, int equipeId)
        {
            return _context.EquipeApplicatifs.Any(e => e.AppId == applicatifId && e.EquipeId == equipeId);
        }

voici l'erreur qu'on me montre 
Cette page localhost est introuvableAucune page web n'a été trouvée pour l'adresse web : https://localhost:44392/Applicatif/EditCriticite
HTTP ERROR 404
