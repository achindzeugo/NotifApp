voici mon controller

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using NotifApps.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace NotifApps.Controllers
{
    public class OrigineController : Controller
    {
        private readonly NotifdbContext _context;

        public OrigineController(NotifdbContext context)
        {
            _context = context;
        }
        // GET: Origine/Index
        public async Task<IActionResult> Index()
        {
            var origines = await _context.Origines.ToListAsync();

            if (origines == null || !origines.Any())
            {
                // Retourne une liste vide si aucune criticité n'est trouvée
                return View(new List<Origine>());
            }
            return View(origines);

        }



        // GET: Origine/Create
        public IActionResult CreateOrigine()
        {
            return View();
        }

        // POST: Origine/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> CreateOrigine(Origine origine)
        {
            if (ModelState.IsValid)
            {
                origine.Statut = "Actif";
                _context.Add(origine);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index)); 
            }
            return View(origine);
        }

        // GET: Origine/Edit/5
        public async Task<IActionResult> EditOrigine(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var origine = await _context.Origines.FindAsync(id);
            if (origine == null)
            {
                return NotFound();
            }
            return View(origine);
        }

        // POST: Origine/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> EditOrigine(int id, Origine origine)
        {
            if (id != origine.OrigineId)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(origine);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!OrigineExists(origine.OrigineId))
                    {
                        return NotFound();
                    }
                    throw;
                }
                return RedirectToAction(nameof(Index)); 
            }
            return View(origine);
        }

        private bool OrigineExists(int origineId)
        {
            throw new NotImplementedException();
        }

        // GET: Origine/Delete/5
        public async Task<IActionResult> DeleteOrigine(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var origine = await _context.Origines
                .FirstOrDefaultAsync(m => m.OrigineId == id);
            if (origine == null)
            {
                return NotFound();
            }

            return View(origine);
        }

        // POST: Origine/Delete/5
        [HttpPost, ActionName("DeleteOrigine")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var origine = await _context.Origines.FindAsync(id);
            if (origine == null)
            {
                return NotFound();
            }

            var incidents = await _context.Incidents.Where(i => i.OrigineId == id).ToListAsync();
            _context.Incidents.RemoveRange(incidents);

            _context.Origines.Remove(origine);
            await _context.SaveChangesAsync();

            return RedirectToAction(nameof(Index));
        }

    }
}

ma vue create 
@model NotifApps.Models.Origine

@{
    ViewData["Title"] = "Créer Origine";
}
<h2> créer Origine</h2>
<hr />
<div class="container mt-5">
    <div class="card card">
        <div class="card-header bg-black text-white">
            <h4>Créer Origine</h4>
        </div>
        <div class="card-body">
            <form asp-action="CreateOrigine">
                <div class="form-group">
                    <label asp-for="OrigineNom"></label>
                    <input asp-for="OrigineNom" class="form-control" placeholder="Entrez un nom" />
                    <span asp-validation-for="OrigineNom" class="text-danger"></span>
                </div>
                <div class=" d-flex justify-content-center text-center mt-4">
                    <button type="submit" class="btn btn-danger ms-3" title="Créer"><i class="fas fa-save"></i></button>
                    <a asp-action="Index" class="btn btn-black ms-3" title="Annuler"><i class="fas fa-ban"></i></a>


                </div>
            </form>
        </div>
    </div>
</div>


<style>
    .card {
        border-top-color: red;
        border-top-style: solid;
        border-top-width: 5px;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }
</style>

ma vue Edit 
@model NotifApps.Models.Origine

@{
    ViewData["Title"] = "Modifier Origine";
}

<h2>Modifier l'origine</h2>
<hr />

<div class="container mt-5">
    <div class="card card">
        <div class="card-header bg-black text-white">
            <h4>Modifier Origine</h4>
        </div>
        <div class="card-body">
            <form asp-action="EditOrigine">
                <input type="hidden" asp-for="OrigineId" />
                <div class="form-group">
                    <label asp-for="OrigineNom"></label>
                    <input asp-for="OrigineNom" class="form-control" />
                    <span asp-validation-for="OrigineNom" class="text-danger"></span>
                </div>
                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-danger" title="Enregistrer"><i class="fas fa-save"></i></button>
                    <a asp-action="Index" class="btn btn-black mx-2 ms-3" title="Annuler"><i class="fas fa-ban"></i></a>

                </div>
            </form>
        </div>
    </div>
</div>



<style>
    .card {
        border-top-color: red;
        border-top-style: solid;
        border-top-width: 5px;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }
</style>

ma vue Index 
@model IEnumerable<NotifApps.Models.Origine>

<h2>Origines</h2>
<hr />
<p>
    <a asp-action="CreateOrigine" class="btn btn-black">Ajouter Origine</a>
</p>

<table class="table table">
    <thead>
        <tr>
            <th class="bg-black text-white" >Origine Name</th>
            <th class="bg-black text-white">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var origine in Model)
        {
            <tr>
                <td>@origine.OrigineNom</td>
                <td>
                    <a asp-action="EditOrigine" asp-route-id="@origine.OrigineId" class="btn btn-warning" title="Modifier"><i class="fas fa-edit"></i></a>
                    <a asp-action="DeleteOrigine" asp-route-id="@origine.OrigineId" class="btn btn-danger" title="Effacer"><i class="fas fa-trash"></i></a>
                </td>
            </tr>
        }
    </tbody>
</table>



<style>
    .table {
        border-top-color: red;
        border-top-style: solid;
        border-top-width: 5px;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }
</style>