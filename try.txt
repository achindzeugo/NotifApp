voici mon controller,
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using NotifApps.Models;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace NotifApps.Controllers
{
    public class IncidentController : Controller
    {
        private readonly NotifdbContext _context;

        public IncidentController(NotifdbContext context)
        {
            _context = context;
        }
   
        public async Task<IActionResult> Index()
        {
            var incidents = await _context.Incidents
                .Include(i => i.App)
                .Include(i => i.Criticite)
                .Include(i => i.Statut)
                .Include(i => i.Origine)
                .ToListAsync();

            // Handle NULL values if necessary
            foreach (var incident in incidents)
            {
                incident.App = incident.App ?? new Applicatif();
                incident.Criticite = incident.Criticite ?? new Criticite();
                incident.Statut = incident.Statut ?? new Statut();
                incident.Origine = incident.Origine ?? new Origine();
            }

            return View(incidents);
        }


        // GET: Incident/Create
        // GET: Incident/Create
        public IActionResult Create()
        {
            // Remplir les ViewBag pour les sélections
            ViewBag.EquipeId = _context.Equipes.Select(e => new SelectListItem
            {
                Value = e.EquipeId.ToString(),
                Text = e.NomEquipe
            }).ToList();

            ViewBag.AppId = _context.Applicatifs.Select(a => new SelectListItem
            {
                Value = a.AppId.ToString(),
                Text = a.AppNom
            }).ToList();

            // Filtrer les criticités dont le statut est "Actif"
            ViewBag.CriticiteId = _context.Criticites
                .Where(c => c.Statut == "Actif") // Filtrer uniquement les criticités actives
                .Select(c => new SelectListItem
                {
                    Value = c.CriticiteId.ToString(),
                    Text = c.CriticiteNom
                }).ToList();

            ViewBag.StatutId = _context.Statuts
                .Where(s => s.Statut1 == "Actif")
                .Select(s => new SelectListItem
            {
                Value = s.StatutId.ToString(),
                Text = s.StatutNom
            }).ToList();

            ViewBag.OrigineId = _context.Origines
                .Where(o => o.OrigineNom != null) // Filtrer les valeurs NULL
                .Where(o => o.Statut =="Actif")
                .Select(o => new SelectListItem
                {
                    Value = o.OrigineId.ToString(),
                    Text = o.OrigineNom
                }).ToList();

            return View();
        }


        // POST: Incident/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("IncidentId,Description,DestinataireSup,CriticiteId,StatutId,AppId,Titre,Pec,RefTicket,LienTicket,Debutdimpact,Datepriseencharge,Impact,EquipeId")] Incident incident, string OrigineNom)
        {
            if (ModelState.IsValid)
            {
                // Normaliser le nom de l'origine pour la comparaison
                var normalizedOrigineNom = OrigineNom.Trim().ToUpper(); // Convert to capital lettrs

                // Vérifiez si une origine similaire existe déjà
                var existingOrigine = await _context.Origines
                    .FirstOrDefaultAsync(o => o.OrigineNom.ToUpper() == normalizedOrigineNom);

                if (existingOrigine == null)
                {
                    // Vérifiez les origines existantes pour des correspondances similaires
                    var similarOrigines = await _context.Origines
                        .Where(o => o.OrigineNom.ToUpper().Contains(normalizedOrigineNom) ||
                                     normalizedOrigineNom.Contains(o.OrigineNom.ToUpper()))
                        .ToListAsync();

                    if (similarOrigines.Any())
                    {
                        // Utilisez l'origine existante si une correspondance similaire est trouvée
                        incident.OrigineId = similarOrigines.First().OrigineId;
                    }
                    else
                    {
                        // Si aucune origine similaire, ajoutez une nouvelle origine
                        var newOrigine = new Origine { OrigineNom = normalizedOrigineNom }; // Utiliser le nom normalisé
                        _context.Origines.Add(newOrigine);
                        await _context.SaveChangesAsync();
                        incident.OrigineId = newOrigine.OrigineId;
                    }
                }
                else
                {
                    // Si une origine exacte existe, utilisez son ID
                    incident.OrigineId = existingOrigine.OrigineId;
                }

                using (var transaction = await _context.Database.BeginTransactionAsync())
                {
                    try
                    {
                        _context.Add(incident);
                        await _context.SaveChangesAsync(); 

                        await _context.SaveChangesAsync(); 
                        await transaction.CommitAsync();
                        return RedirectToAction(nameof(Index));
                    }
                    catch (Exception)
                    {
                        await transaction.RollbackAsync();
                        throw;
                    }
                }
            }

            ViewBag.EquipeId = _context.Equipes.Select(e => new SelectListItem
            {
                Value = e.EquipeId.ToString(),
                Text = e.NomEquipe
            }).ToList();

            ViewBag.AppId = _context.Applicatifs.Select(a => new SelectListItem
            {
                Value = a.AppId.ToString(),
                Text = a.AppNom
            }).ToList();

            ViewBag.CriticiteId = _context.Criticites.Select(c => new SelectListItem
            {
                Value = c.CriticiteId.ToString(),
                Text = c.CriticiteNom
            }).ToList();

            ViewBag.StatutId = _context.Statuts.Select(s => new SelectListItem
            {
                Value = s.StatutId.ToString(),
                Text = s.StatutNom
            }).ToList();

            ViewBag.OrigineId = _context.Origines.Select(o => new SelectListItem
            {
                Value = o.OrigineId.ToString(),
                Text = o.OrigineNom
            }).ToList();

            return View(incident);
        }



        // GET: Incident/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var incident = await _context.Incidents
                .Include(i => i.App)
                .Include(i => i.App)
               .Include(i => i.Criticite)
                .Include(i => i.Statut)
                .Include(i => i.Origine)
                .Include(i => i.Equipe)
                .Include(i=>i.PlanDactions)
                .FirstOrDefaultAsync(m => m.IncidentId == id);

            if (incident == null)
            {
                return NotFound();
            }

            return View(incident);
        }


        /* // GET: Incident/Edit/5
         public async Task<IActionResult> Edit(int? id)
         {
             if (id == null)
             {
                 return NotFound();
             }

             var incident = await _context.Incidents
                 .Include(i => i.App)
                 .Include(i => i.Criticite)
                 .Include(i => i.Statut)
                 .Include(i => i.Origine)
                 .FirstOrDefaultAsync(m => m.IncidentId == id);
             if (incident == null)
             {
                 return NotFound();
             }
             PopulateDropDownLists(incident);
             return View(incident);
         }

         // POST: Incident/Edit/5
         [HttpPost]
         [ValidateAntiForgeryToken]
         public async Task<IActionResult> Edit(int id, [Bind("IncidentId,Description,DestinataireSup,OrigineId,CriticiteId,StatutId,AppId")] Incident incident)
         {
             if (id != incident.IncidentId)
             {
                 return NotFound();
             }

             if (ModelState.IsValid)
             {
                 try
                 {
                     _context.Update(incident);
                     await _context.SaveChangesAsync();
                 }
                 catch (DbUpdateConcurrencyException)
                 {
                     if (!IncidentExists(incident.IncidentId))
                     {
                         return NotFound();
                     }
                     else
                     {
                         throw;
                     }
                 }
                 return RedirectToAction(nameof(Index));
             }
             PopulateDropDownLists(incident);
             return View(incident);
         }*/

        //POST:AJOUTER PLANDACTION
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> AddPlanDaction(int incidentId, string planDescription, DateTime? dateReelle)
        {
            if (string.IsNullOrWhiteSpace(planDescription))
            {
                return BadRequest("Le plan d'action ne peut pas etre vide.");
            }

            var incident = await _context.Incidents.FindAsync(incidentId);
            if (incident == null)
            {
                return NotFound();
            }

            if (string.IsNullOrWhiteSpace(planDescription))
            {
                planDescription = "Plan d'action par defaut"; 
                dateReelle = DateTime.Now; 
            }

            var planDaction = new PlanDaction
            {
                PlanDescription = planDescription,
                DateReelle = dateReelle ?? DateTime.Now, // Ensure this captures the correct date and time
                IncidentId = incidentId
            };

            _context.PlanDactions.Add(planDaction);
            await _context.SaveChangesAsync();

            return RedirectToAction(nameof(Details), new { id = incidentId });
        }

        // GET: Edit Plan Daction
        public async Task<IActionResult> EditPlanDaction(int id)
        {
            var planDaction = await _context.PlanDactions.FindAsync(id);
            if (planDaction == null)
            {
                return NotFound();
            }
            return View(planDaction);
        }

        // POST: Edit Plan Daction
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> EditPlanDaction(PlanDaction planDaction)
        {
            if (ModelState.IsValid)
            {
                if (planDaction.IncidentId == null)
                {
                    ModelState.AddModelError("", "L'ID de l'incident est requis.");
                    return View(planDaction);
                }

                _context.Update(planDaction);
                await _context.SaveChangesAsync();
                return RedirectToAction("Details", new { id = planDaction.IncidentId });
            }
            return View(planDaction);
        }


       

        // POST: Delete Plan Daction
        [HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> DeletePlanDaction(int id)
{
    var planDaction = await _context.PlanDactions.FindAsync(id);
    if (planDaction != null)
    {
        _context.PlanDactions.Remove(planDaction);
        await _context.SaveChangesAsync();
    }
    return RedirectToAction("Details", new { id = planDaction.IncidentId });
}



        // GET: Incident/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var incident = await _context.Incidents
                .Include(i => i.App)
                .Include(i => i.Criticite)
                .Include(i => i.Statut)
                .Include(i => i.Origine)
                                .Include(i => i.Equipe)

                .FirstOrDefaultAsync(m => m.IncidentId == id);
            if (incident == null)
            {
                return NotFound();
            }

            ViewBag.EquipeId = _context.Equipes
                .Where(e => e.Statut == "Actif")
                .Select(e => new SelectListItem
            {
                Value = e.EquipeId.ToString(),
                Text = e.NomEquipe
            }).ToList();

            ViewBag.AppId = _context.Applicatifs.Select(a => new SelectListItem
            {
                Value = a.AppId.ToString(),
                Text = a.AppNom
            }).ToList();

            ViewBag.CriticiteId = _context.Criticites
                .Where(e => e.Statut == "Actif")
                .Select(c => new SelectListItem
            {
                Value = c.CriticiteId.ToString(),
                Text = c.CriticiteNom
            }).ToList();

            ViewBag.StatutId = _context.Statuts
                .Where(e => e.Statut1 == "Actif")
                .Select(s => new SelectListItem
            {
                Value = s.StatutId.ToString(),
                Text = s.StatutNom
            }).ToList();

            ViewBag.OrigineId = _context.Origines
                .Where(e => e.Statut == "Actif")
                .Select(o => new SelectListItem
            {
                Value = o.OrigineId.ToString(),
                Text = o.OrigineNom
            }).ToList();

         

            return View(incident);
        }



        // POST: Incident/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("IncidentId,Description,DestinataireSup,OrigineId,CriticiteId,StatutId,AppId,Titre,RefTicket,LienTicket,Debutdimpact,Datepriseencharge,Impact,EquipeId,Dateresolution")] Incident incident)
        {
            if (id != incident.IncidentId)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(incident);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!IncidentExists(incident.IncidentId))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }


            ViewBag.EquipeId = _context.Equipes.Select(e => new SelectListItem
            {
                Value = e.EquipeId.ToString(),
                Text = e.NomEquipe
            }).ToList();
            ViewBag.AppId = _context.Applicatifs.Select(a => new SelectListItem
            {
                Value = a.AppId.ToString(),
                Text = a.AppNom
            }).ToList();

            ViewBag.CriticiteId = _context.Criticites.Select(c => new SelectListItem
            {
                Value = c.CriticiteId.ToString(),
                Text = c.CriticiteNom
            }).ToList();

            ViewBag.StatutId = _context.Statuts.Select(s => new SelectListItem
            {
                Value = s.StatutId.ToString(),
                Text = s.StatutNom
            }).ToList();

            ViewBag.OrigineId = _context.Origines.Select(o => new SelectListItem
            {
                Value = o.OrigineId.ToString(),
                Text = o.OrigineNom
            }).ToList();

          

            return View(incident);
        }



        // GET: Incident/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var incident = await _context.Incidents
                .Include(i => i.App)
              .Include(i => i.App)
                .Include(i => i.Criticite)
                .Include(i => i.Statut)
                .Include(i => i.Origine)
                .Include(i=>i.Equipe)
               .FirstOrDefaultAsync(m => m.IncidentId == id);
            if (incident == null)
            {
                return NotFound();
            }

            return View(incident);
        }

        // POST: Incident/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var incident = await _context.Incidents.FindAsync(id);
            _context.Incidents.Remove(incident);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool IncidentExists(int id)
        {
            return _context.Incidents.Any(e => e.IncidentId == id);
        }

        private void PopulateDropDownLists(Incident incident = null)
        {
            ViewData["AppId"] = new SelectList(_context.Applicatifs, "App_ID", "App_nom", incident?.AppId);
            ViewData["CriticiteId"] = new SelectList(_context.Criticites, "Criticite_ID", "Criticite_nom", incident?.CriticiteId);
            ViewData["StatutId"] = new SelectList(_context.Statuts, "Statut_ID", "Statut_nom", incident?.StatutId);
            ViewData["OrigineId"] = new SelectList(_context.Origines, "Origine_ID", "Origine_nom", incident?.OrigineId);
            ViewData["EquipeId"] = new SelectList(_context.Equipes, "EquipeId", "NomEquipe", incident?.EquipeId);

        }
    }
}

voici ma vue Edit 
@model NotifApps.Models.Incident

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<div class="card card">
    <div class="card-header bg-black text-white">
        <h4 class="text-center">Modifier l'Incident</h4>
    </div>
    <div class="card-body">
        <form asp-action="Edit">
            <input type="hidden" asp-for="IncidentId" />

            <div class="form-group">
                <label class="control-label">Titre <span class="text-danger">*</span></label>
                <textarea asp-for="Titre" class="form-control"></textarea>

                <span asp-validation-for="Titre" class="text-danger"></span>
            </div>

            <div class="form-group flex-fill me-2">
                <label class="control-label">Applicatif <span class="text-danger">*</span></label>
                <div class="input-group">
                    <select asp-for="AppId" class="form-control" asp-items="ViewBag.AppId"></select>
                    <span class="input-group-text" style="cursor: pointer;">
                        <i class="fas fa-chevron-down"></i>
                    </span>
                </div>
                <span asp-validation-for="AppId" class="text-danger"></span>
            </div>

            <div class="form-group d-flex justify-content-between">
                <div class="flex-fill me-2">
                    <label class="control-label">Criticité <span class="text-danger">*</span></label>
                    <div class="input-group">
                        <select asp-for="CriticiteId" class="form-control" asp-items="ViewBag.CriticiteId"></select>
                        <span class="input-group-text" style="cursor: pointer;">
                            <i class="fas fa-chevron-down"></i>
                        </span>
                    </div>
                    <span asp-validation-for="CriticiteId" class="text-danger"></span>
                </div>
                <div class="flex-fill">
                    <label class="control-label">Statut <span class="text-danger">*</span></label>
                    <div class="input-group">
                        <select asp-for="StatutId" class="form-control" asp-items="ViewBag.StatutId"></select>
                        <span class="input-group-text" style="cursor: pointer;">
                            <i class="fas fa-chevron-down"></i>
                        </span>
                    </div>
                    <span asp-validation-for="StatutId" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group d-flex justify-content-between">
                <div class="flex-fill me-2">
                    <label class="control-label">Référence du ticket <span class="text-danger">*</span></label>
                    <input asp-for="RefTicket" class="form-control" />
                    <span asp-validation-for="RefTicket" class="text-danger"></span>
                </div>
                <div class="flex-fill">
                    <label class="control-label">Lien du ticket <span class="text-danger">*</span></label>
                    <input asp-for="LienTicket" class="form-control" />
                    <span asp-validation-for="LienTicket" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group flex-fill me-2">
                <label class="control-label">Prise en charge <span class="text-danger">*</span></label>
                <div class="input-group">
                    <select asp-for="EquipeId" class="form-control" asp-items="ViewBag.EquipeId"></select>
                    <span class="input-group-text" style="cursor: pointer;">
                        <i class="fas fa-chevron-down"></i>
                    </span>
                </div>
                <span asp-validation-for="EquipeId" class="text-danger"></span>
            </div>

            <div class="form-group d-flex justify-content-between">
                <div class="flex-fill me-2">
                    <label class="control-label">Début d'impact <span class="text-danger">*</span></label>
                    <input asp-for="Debutdimpact" class="form-control" type="datetime-local" />
                    <span asp-validation-for="Debutdimpact" class="text-danger"></span>
                </div>
                <div class="flex-fill me-2">
                    <label class="control-label">Date de prise en charge <span class="text-danger">*</span></label>
                    <input asp-for="Datepriseencharge" class="form-control" type="datetime-local" />
                    <span asp-validation-for="Datepriseencharge" class="text-danger"></span>
                </div>

                <div class="flex-fill">
                    <label class="control-label">Date de résolution <span class="text-danger">*</span></label>
                    <input asp-for="Dateresolution" class="form-control" type="datetime-local" placeholder="Selectionnez une date" />
                    <span asp-validation-for="Dateresolution" class="text-danger"></span>
                </div>
                
            </div>

            <div class="form-group">
                <label class="control-label">Description <span class="text-danger">*</span></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label class="control-label">Origine <span class="text-danger">*</span></label>
                <select asp-for="OrigineId" class="form-control" asp-items="ViewBag.OrigineId"></select>
                <span asp-validation-for="OrigineId" class="text-danger"></span>
            </div>


            <div class="form-group">
                <label class="control-label">Impact <span class="text-danger">*</span></label>
                <textarea asp-for="Impact" class="form-control"></textarea>
                <span asp-validation-for="Impact" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="DestinataireSup" class="control-label"></label>
                <input asp-for="DestinataireSup" class="form-control" />
                <span asp-validation-for="DestinataireSup" class="text-danger"></span>
            </div>

            <div class="text-center mt-4">
                <button type="submit" class="btn btn-danger me-2">
                    <i class="fas fa-save"></i> Enregistrer
                </button>
                <a asp-action="Index" class="btn btn-black">
                    <i class="fas fa-ban"></i> Annuler
                </a>
            </div>
        </form>
    </div>
</div>

<div class="mt-3">
    <a asp-action="Index">Back to List</a>
</div>


<style>
    .card {
        border-top-color: red;
        border-top-style: solid;
        border-top-width: 5px;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }
</style>

===========================================================================

@model NotifApps.Models.Incident

@{
    string statutColor = Model.Statut?.StatutNom switch
    {
        "En cours" => "bg-en-cours",
        "Résolu" => "bg-resolu",
        "Clos" => "bg-clos",
        _ => "bg-default"
    };
}

<h1 class="text-center text-black">Détails de l'Incident</h1>

<hr />

<div class="container mt-4">
    <div class="card mb-4">
        <!-- Premier segment: Statut de l'incident -->
        <div class="card-header @statutColor text-white d-flex justify-content-between align-items-center">
            <h1 class="text-center w-100">Incident @Model.Statut?.StatutNom</h1>
            <span class="badge @statutColor">@Model.Statut?.StatutNom</span>
        </div>
        <div class="card-body">
            <h1 class="text-center font-weight-bold">@Model.Titre</h1>

            <!-- Applicatif et Criticité -->
            <div class="d-flex justify-content-between align-items-center">
                <p class="w-50"><strong>Applicatif:</strong> @Model.App?.AppNom</p>
                <p class=" w-100">
                    <strong>Criticité:</strong>
                    <span class="badge text-black" style="background-color: @(Model.Criticite?.Couleur ?? "gray");">
                        @(Model.Criticite?.CriticiteNom?.ToUpper() ?? "N/A")
                    </span>
                </p>
            </div>

            <!-- Référence du ticket et lien -->
            <div class="d-flex justify-content-between align-items-center">
                <p class="w-50"><strong>Référence du ticket:</strong> @Model.RefTicket</p>
                <p class=" w-100"><strong>Lien du ticket:</strong> <a href="@Model.LienTicket" target="_blank">@Model.LienTicket</a></p>
            </div>

            <!-- Prise en charge -->
            <p class="text-start"><strong>Prise en charge par:</strong> @Model.Equipe?.NomEquipe</p>
        </div>

        <!-- Deuxième segment: Resumé -->
        <div class="card-header @statutColor text-white d-flex justify-content-between align-items-center">
            <h1 class="w-100 text-center">Resumé</h1>
            <i class="fa fa-sticky-note m-md-2"></i>
        </div>
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center text-black">
                <p class=""><strong>Début d'impact:</strong> @Model.Debutdimpact?.ToString("g")</p>
                <p class=""><strong>Date de prise en charge:</strong> @Model.Datepriseencharge?.ToString("g")</p>
                <p>
                    <strong>Date de Résolution :</strong>
                    @(Model.Dateresolution.HasValue
                        ? Model.Dateresolution?.ToString("dd MMMM yyyy HH:mm:ss")
                        : "Non résolu")
                </p>

            </div>
            <p class="text-start"><strong>Description:</strong> @Model.Description</p>
            <p class="text-start"><strong>Origine:</strong> @Model.Origine?.OrigineNom</p>
        </div>

        <!-- Troisième segment: Impact -->
        <div class="card-header @statutColor text-white d-flex justify-content-between align-items-center">
            <h1 class="w-100 text-center">Impact</h1>
            <i class="fas fa-exclamation-circle mx-5"></i>
        </div>
        <div class="card-body">
            <br />
            <p class="text-start"><strong>Impact:</strong> @Model.Impact</p>
            <br />
        </div>

        <!-- Plans d'actions section -->
        <div class="card-header @statutColor text-white d-flex justify-content-between align-items-center">
            <h1 class="w-100 text-center">Plan d'action</h1>
            <i class="fa fa-puzzle-piece"></i>
        </div>

        <div class="card-body">
            <div id="planForm" style="display:none;">
                <form asp-action="AddPlanDaction" method="post">
                    <input type="hidden" name="IncidentId" value="@Model.IncidentId" />
                    <div class="form-group">
                        <label for="PlanDescription">Plan d'Action:</label>
                        <textarea type="text" class="form-control" name="PlanDescription" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="DateReelle">Date et Heure Réelle:</label>
                        <input type="datetime-local" class="form-control" name="DateReelle" />
                    </div>
                    <div class="d-flex justify-content-center">
                        <button type="submit" class="btn btn-danger ms-2 mt-2"><i class="fas fa-save"></i></button>
                        <button type="button" class="btn btn-black ms-2 mt-2" id="closePlanForm"><i class="fas fa-ban"></i></button>
                    </div>
                </form>
            </div>
            <hr />
            <div class="d-flex justify-content-between align-items-center">
                <button id="togglePlanForm" class="btn btn-black" readonly><i class="fas fa-plus "></i> Plan d'Action</button>
            </div>

            <hr />

            @if (Model.PlanDactions != null && Model.PlanDactions.Any())
            {
                foreach (var plan in Model.PlanDactions.OrderByDescending(p => p.DateReelle))
                {
                    <div class="alert alert-black d-flex justify-content-between align-items-center">
                        <div>
                            <strong>Plan:</strong> @plan.PlanDescription
                            <br />
                            <strong>Date et heure:</strong> @plan.DateReelle?.ToString("g")
                        </div>
                        <div>
                            <a href="@Url.Action("EditPlanDaction", new { id = plan.PlanId })" class="text-black me-2" title="Modifier">
                                <i class="fas fa-edit"></i>
                            </a>
                            <form asp-action="DeletePlanDaction" method="post" style="display:inline;">
                                <input type="hidden" name="id" value="@plan.PlanId" />
                                <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Êtes-vous sûr de vouloir supprimer ce plan d\'action ?');">
                                    <i class="fas fa-trash text-bg-danger"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>Aucun plan d'action ajouté.</p>
            }

            <hr />
        </div>

        <div class="d-flex justify-content-center">
            <button type="submit" class="btn @statutColor text-white"><i class="fas fa-paper-plane text-white"></i> Envoyer</button>
        </div>
    </div>
</div>

<style>
    .bg-en-cours {
        background-color: orange !important;
    }

    .bg-resolu {
        background-color: green !important;
    }

    .bg-clos {
        background-color: blue !important;
    }

    .bg-default {
        background-color: gray !important;
    }

    .font-weight-bold {
        font-weight: bold;
    }

    .h4 {
        font-size: 1.5rem;
    }
</style>
<script>
    document.getElementById('togglePlanForm').addEventListener('click', function () {
        const form = document.getElementById('planForm');
        form.style.display = form.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('closePlanForm').addEventListener('click', function () {
        document.getElementById('planForm').style.display = 'none';
    });

</script>


